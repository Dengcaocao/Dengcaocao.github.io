{
  "code": 200,
  "data": [
    {
      "uuid": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
      "name": "Css动画",
      "data": [
        {
          "created_at": "2023-05-24 16:03:46",
          "title": "吃豆人",
          "description": "动画+阴影实现",
          "pic": "https://dengcaocao.github.io/resources/images/企业微信截图_0f432a2a-4d1d-4d3c-87c8-870f2601f2a8.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/吃豆人.html",
          "status": "online",
          "uuid": "27785627-301e-451d-bc16-f0527d10641f",
          "content": "<p>其实这个是很简单的，只需要一个div盒子结合Css动画和阴影就可以实现。这里只包含部分css代码，其他css代码自己补充。</p><pre><code class=\"language-html\">&lt;div&gt;&lt;/div&gt;</code></pre><p>为div创建两个伪元素，扮演吃豆人的嘴。</p><pre><code class=\"language-css\">.warp:before{\n\tposition:absolute;\n\ttop:0;\n\tcontent:\"\";\n\twidth:200px;\n\theight:100px;\n\tborder-radius:100px 100px 0 0;\n\ttransform:rotate(-30deg);\n\tbackground:#ffff00;\n\tmargin-left:80px;\n\tanimation:moveTop 1s infinite;\n}\n.warp:after{\n\tposition:absolute;\n\tbottom:0;\n\tcontent:\"\";\n\twidth:200px;\n\theight:100px;\n\tborder-radius:0 0 100px 100px;\n\ttransform:rotate(30deg);\n\tbackground:#ffff00;\n\tmargin-left:80px;\n\tanimation:moveBottom 1s infinite;\n}</code></pre><p>分别为其创建一个动画，让嘴可以开合。</p><pre><code class=\"language-css\">@keyframes moveTop{\n\tfrom{\n\t\ttransform:rotate(-30deg);\n\t}\n\tto{\n\t\ttransform:rotate(0deg);\n\t}\n}\n@keyframes moveBottom{\n\tfrom{\n\t\ttransform:rotate(30deg);\n\t}\n\tto{\n\t\ttransform:rotate(0deg);\n\t}\n}</code></pre><p>剩下就是豆豆了，很多人不知道一个div怎么去画豆豆，其实阴影是可以有多个的，不知道的白去百度吧😁。接下来为div创建多个阴影。</p><p><br></p><pre><code class=\"language-css\">box-shadow:300px 0px 0px -70px #00cc00,\n\t\t   500px 0px 0px -70px #00cc00,\n\t\t   700px 0px 0px -70px #00cc00,\n\t\t   900px 0px 0px -70px #00cc00;</code></pre><p>创建一个动画让豆豆动起来</p><pre><code class=\"language-css\">@keyframes moveDD{\n\tfrom{\n\t\tbox-shadow:300px 0px 0px -70px #00cc00,\n\t\t\t\t   500px 0px 0px -70px #00cc00,\n\t\t\t\t   700px 0px 0px -70px #00cc00,\n\t\t\t\t   900px 0px 0px -70px #00cc00;\n\t}\n\tto{\n\t\tbox-shadow:100px 0px 0px -70px #00cc00,\n\t\t\t\t   300px 0px 0px -70px #00cc00,\n\t\t\t\t   500px 0px 0px -70px #00cc00,\n\t\t\t\t   700px 0px 0px -70px #00cc00;\n\t}\n}</code></pre><p><br></p>"
        },
        {
          "created_at": "2023-05-23 22:29:29",
          "title": "加载动画",
          "description": "动画结合transform，指定动画执行延迟时间",
          "pic": "https://dengcaocao.github.io/resources/images/QQ截图20230523231255.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/loading.html",
          "status": "online",
          "uuid": "3924b325-bda5-461f-8317-209020ff7ea9",
          "content": "<pre><code class=\"language-html\">&lt;div&gt;&lt;/div&gt;</code></pre><p>使用after、before创建两个伪元素，并设置一边的边框，然后通过动画使其旋转起来，每个元素的动画指定不同的延迟时间</p><pre><code class=\"language-css\">animation: move 1s linear infinite;\n@keyframes move {\r\n    0%{\r\n        transform: rotate(0deg);\r\n    }\r\n    100%{\r\n        transform: rotate(360deg);\r\n    }\r\n}</code></pre><p><br></p>"
        },
        {
          "created_at": "2023-05-23 22:44:19",
          "pic": "https://dengcaocao.github.io/resources/images/QQ截图20230523231102.png",
          "title": "跳动的心♥",
          "description": "动画结合transform",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/跳动的心.html",
          "status": "online",
          "uuid": "8fcf0643-0f39-4d97-b6c4-c2fbcf21f05d",
          "content": "<p>html结构</p><pre><code class=\"language-html\">&lt;div id=\"box\"&gt;\r\n\t&lt;div id=\"left\"&gt;&lt;/div&gt;\r\n    &lt;div id=\"right\"&gt;&lt;/div&gt;\r\n&lt;/div&gt;</code></pre><p>将子元素相对于父元素进行定位，让后设置顶端为圆形，将left旋转-45deg，right旋转45deg，并使用translate移动自身的一半，就形成一个爱心啦🤞。</p><p>然后将box整体通过transform进行缩放就实现了跳动的效果。</p><pre><code class=\"language-css\">@keyframes move{\r\n\tfrom{\r\n\t\ttransform:scale(1,1);\r\n\t}\r\n\tto{\r\n\t\ttransform:scale(1.2,1.2);\r\n\t}\r\n}</code></pre><p><br></p>"
        },
        {
          "created_at": "2023-05-23 22:39:03",
          "pic": "https://dengcaocao.github.io/resources/images/QQ截图20230523220750.png",
          "title": "Css3 3D 旋转球",
          "description": "学习Css3 transform属性和动画",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/3D-旋转球.html",
          "status": "online",
          "uuid": "36815bf3-0ae1-4302-a96c-c668aeef2644",
          "content": "<p>首先定义一个盒子，里面包含6个子元素，分别对应上、下、左、右、前、后这几个面。使用transform属性排列成一个正方体。</p><pre><code class=\"language-html\">&lt;div&gt;\n    &lt;div class=\"side front\"&gt;\r\n        &lt;div class=\"outer\"&gt;&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"side back\"&gt;\r\n        &lt;div class=\"outer\"&gt;&lt;/div&gt;\r\n     &lt;/div&gt;\r\n     &lt;div class=\"side top\"&gt;\r\n         &lt;div class=\"outer\"&gt;&lt;/div&gt;\r\n     &lt;/div&gt;\r\n      &lt;div class=\"side right\"&gt;\r\n          &lt;div class=\"outer\"&gt;&lt;/div&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"side bottom\"&gt;\r\n          &lt;div class=\"outer\"&gt;&lt;/div&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"side left\"&gt;\r\n          &lt;div class=\"outer\"&gt;&lt;/div&gt;\r\n      &lt;/div&gt;\n&lt;/div&gt;</code></pre><p>outer相对于side进行定位，然后使用伪类设置悬浮成样式。</p><pre><code class=\"language-css\">.side::after,\r\n.side::before,\r\n.outer::before,\r\n.outer::after{\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    margin: auto;\r\n    border-radius: inherit;\r\n}\n.outer::before{\r\n    width: 80px;\r\n    height: 80px;\r\n    border: 1px solid;\r\n    color: crimson;\r\n    box-shadow: inset 0 0 60px,\r\n                      0 0 60px;\r\n    transform: translateZ(40px);\r\n}\n……</code></pre><p>然后多设置盒子就会形成一个球形了，然后通过css动画就可以得到一个旋转的球了</p><p><br></p>"
        },
        {
          "created_at": "2023-05-16 14:22:52",
          "link": "https://dengcaocao.github.io/demo/CSS3/scale.html",
          "title": "缩放",
          "description": "缩放",
          "pic": "https://dengcaocao.github.io/resources/images/pull-shark-default.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "status": "online",
          "uuid": "bddb25b4-705d-4a6c-9a59-f2cf0addac87",
          "content": "<p>demo描述</p>"
        },
        {
          "created_at": "2023-05-16 14:17:51",
          "link": "https://dengcaocao.github.io/demo/CSS3/3D相册.html",
          "title": "3D相册",
          "description": "3D相册",
          "pic": "https://dengcaocao.github.io/resources/images/pull-shark-default.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "status": "online",
          "uuid": "1fa00439-61ab-4617-86b3-539aa38f4698",
          "content": "<p>demo描述</p>"
        },
        {
          "created_at": "2023-05-16 14:33:50",
          "title": "step动画",
          "description": "step动画",
          "pic": "https://dengcaocao.github.io/resources/images/pull-shark-default.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/CSS3/step.html",
          "status": "online",
          "uuid": "d47d53bb-53f2-41a8-8b6c-82514122a49e",
          "content": "<p>dmeo描述</p>"
        },
        {
          "created_at": "2023-05-16 14:45:49",
          "title": "滤镜",
          "description": "滤镜",
          "pic": "https://dengcaocao.github.io/resources/images/pull-shark-default.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/CSS3/css3滤镜.html",
          "status": "online",
          "uuid": "72de8315-5169-4c03-9bc0-b368db8c0c83",
          "content": "<p>demo描述</p>"
        },
        {
          "created_at": "2023-05-16 14:17:47",
          "title": "蛇形边界",
          "description": "蛇形边界",
          "pic": "https://dengcaocao.github.io/resources/images/pull-shark-default.png",
          "type": "3e5b47f5-dc69-44ad-8277-8d7690691ef6",
          "link": "https://dengcaocao.github.io/demo/CSS3/hover.html",
          "status": "online",
          "uuid": "690ed97a-bb96-4d81-94d0-2e9c06789155",
          "content": "<p>demo描述</p>"
        }
      ]
    },
    {
      "uuid": "6a125eb0-3ec5-4bc9-b2b1-cea4d97eac20",
      "name": "javaScript动画",
      "data": [
        {
          "created_at": "2023-05-24 16:07:23",
          "title": "鼠标跟随",
          "description": "canvas绘制的一个鼠标跟随特效",
          "pic": "https://dengcaocao.github.io/resources/images/企业微信截图_789940d1-c120-46ca-a842-68462bb0770c.png",
          "type": "6a125eb0-3ec5-4bc9-b2b1-cea4d97eac20",
          "link": "https://dengcaocao.github.io/demo/鼠标跟随.html",
          "status": "online",
          "uuid": "33990244-c6e7-4fd4-8e10-cc36c546acd9",
          "content": "<p>HTML结构</p><pre><code class=\"language-html\">&lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;</code></pre><p>定义一个init函数，当屏幕发生变化时重新获取屏幕的宽高去设置canvas的宽高。在这之前需要获取到canvas节点，并创建画笔。</p><pre><code class=\"language-javascript\">const canvas = document.querySelector('#canvas')\nconst ctx = canvas.getContext('2d')\n \nconst init = () =&gt; {\n    canvas.width = window.innerWidth\n    canvas.height = window.innerHeight\n}</code></pre><p>以上准备好后就可以监听鼠标移动事件了。需要定义一个数组来记录鼠标的位置和其他信息。</p><ul><li>dx、dy每次偏移值</li><li>random 随机颜色</li></ul><pre><code class=\"language-javascript\">const random = () =&gt; {\n    return '#' + Math.random().toString(16).slice(-6)\n}</code></pre><pre><code class=\"language-javascript\">const data = []\n\ndoucument.addEventListener('onmousemove', e =&gt; {\n    data.push({\n        left: e.clientX,\n        top: e.clientY,\n        opacity: 1,\n        color: randomColor(),\n        dx: (Math.random()-0.5)*2.5,\n        dy: (Math.random()-0.5)*2.5\n    })\n})</code></pre><p>现在数据有了就可以开始绘制了。定义一个draw绘制函数，每次绘制之前需要清空画布，不然之前绘制的会一直存在。结束当前数据的绘制并删除数据（条件应该是透明度趋近于0，自己确定），否则left、top的值每次累加dx/dy，透明度慢慢变小（一直乘以一个小数，最后值会无限趋近于0）。逻辑清楚了那就开始吧，不懂的方法自行百度。</p><pre><code class=\"language-javascript\">const draw = () =&gt; {\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    for (let i = 0; i &lt; data.length; i++) {\n        if (data[i].opacity &lt; 0.05) return data.splice(i, 1)\n        data[i].left += data[i].dx\n        data[i].top += data[i].dy\n        data[i].opacity *= 0.98\n        cxt.beginPath()\n        ctx.fillStyle = data[i].color\n        ctx.globalAlpha = data[i].opacity\n        ctx.arc(data[i].x, data[i].y, 45, 0, Math.PI*2, true)\n        ctx.closePath()\n        ctx.fill()\n    }\n    requestAnimationFrame(draw)\n}</code></pre><p><br></p>"
        },
        {
          "created_at": "2023-05-23 23:25:07",
          "pic": "https://dengcaocao.github.io/resources/images/QQ截图20230523231716.png",
          "title": "小心心♥",
          "description": "点击屏幕随机生成爱心",
          "type": "6a125eb0-3ec5-4bc9-b2b1-cea4d97eac20",
          "link": "https://dengcaocao.github.io/demo/小心心.html",
          "status": "online",
          "uuid": "c41c9918-452f-45f7-8f75-1580c5acd3eb",
          "content": "<p>定义一个函数用于鼠标点击事件，该函数主要用来创建div盒子和记录DOM样式、位置信息。指定内容，并将其添加到document上。这里需要了解 <a href=\"https://www.iconfont.cn/\" target=\"_blank\">iconfont 的使用</a> </p><pre><code class=\"language-javascript\">const data = []\nconst div = document.createElement('div')\ndiv.innerHTML = '&lt;i class=\"iconfont icon-xin\"&gt;&lt;/i&gt;'\ndocument.body.appendChild(div)\n\ndata.push({\n    dom: div,\n    left: e.clientX,\n    top: e.clientY,\n    scale: 1,\n    opactiy: 1,\n    color: `rgba(Math.random() * 255, Math.random() * 255, Math.random() * 255)`\n})</code></pre><blockquote>这里还有另一中随机颜色的方法。Math.random().toString(16).slice(-6)</blockquote><p>定义move函数来更新位置信息，根据透明度值来判断是否删除数据和移除DOM</p><pre><code class=\"language-javascript\">function move () {\n    for (let i = 0; i &lt; data.length; i++) {\n        if (data[i].opacity &lt;= 0) {\n            data.splice(i, 1)\n            document.body.removeChild(data[i].dom)\n            return\n        }\n        data[i].top --\n        data[i].scale += 0.01\n        data[i].opacity -= 0.01\n        data[i].dom.style.cssText = `\n            top: ${data[i].top}px;\n            left: ${data[i].left}px;\n            opactiy: ${data[i].opactiy};\n            scale: transform: scale(${data[i].opactiy});\n            color: ${data[i].color}\n         `\n    }\n}</code></pre><p>要想使其运动起来，必须在move函数中调用<span style=\"color: rgb(220, 220, 170);\">requestAnimationFrame(move)</span></p>"
        },
        {
          "created_at": "2023-05-23 12:28:09",
          "title": "canvas 粒子运动",
          "description": "canvas 粒子运动",
          "pic": "https://dengcaocao.github.io/resources/images/QQ截图20230523231942.png",
          "type": "6a125eb0-3ec5-4bc9-b2b1-cea4d97eac20",
          "link": "https://dengcaocao.github.io/demo/粒子运动2.html",
          "status": "online",
          "uuid": "7ee70eb9-462c-471e-be7d-46d64f802ccb",
          "content": "<p>使用canvas实现的一个粒子运动效果</p>"
        }
      ]
    }
  ]
}