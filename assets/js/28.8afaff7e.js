(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{292:function(t,s,a){"use strict";a.r(s);var v=a(13),e=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),s("p",[t._v("算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。标准的算术运算符就是加减乘除 (+ - * /)。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Operator")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("求余 (%)")]),t._v(" "),s("td",[t._v("二元运算符。返回相除之后的余数。")])]),t._v(" "),s("tr",[s("td",[t._v("自增 (++)")]),t._v(" "),s("td",[t._v("一元运算符。操作数加一。")])]),t._v(" "),s("tr",[s("td",[t._v("自减 (--)")]),t._v(" "),s("td",[t._v("一元运算符。操作数减一。")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("++i 和 i++ 的区别")]),t._v(" "),s("p",[s("code",[t._v("++i")]),t._v(" 是先自加再使用，"),s("code",[t._v("i++")]),t._v(" 先使用再自加。")])]),t._v(" "),s("h2",{attrs:{id:"三目运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三目运算符"}},[t._v("#")]),t._v(" 三目运算符")]),t._v(" "),s("p",[t._v("又称条件运算符是 JavaScript 中唯一需要三个操作数（三元）的运算符。运算的结果根据给定条件在两个值中取其一。\n表达式为 "),s("code",[t._v("true")]),t._v(" 返回值1，否则返回值2。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 条件 ? 值 1 : 值 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" age\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"逗号运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逗号运算符"}},[t._v("#")]),t._v(" 逗号运算符")]),t._v(" "),s("p",[t._v("对两个操作数或表达式进行求值并返回最终操作数或表达式的值。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 33")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("&&（与）")]),t._v(" "),s("ul",[s("li",[t._v("得出一个布尔值，两个条件同时满足才为 "),s("code",[t._v("true")]),t._v("。")]),t._v(" "),s("li",[t._v("底层运算：（A&&B）A 为真返回 B，A 为假返回 A。")])])]),t._v(" "),s("li",[s("p",[t._v("||（或）")]),t._v(" "),s("ul",[s("li",[t._v("只要一个表达式为真则为真，两个表达式同时为假则为假。")]),t._v(" "),s("li",[t._v("底层运算：（A||B）A 为真返回 A，A 为假返回 B。")])])]),t._v(" "),s("li",[s("p",[t._v("!（非）")]),t._v(" "),s("ul",[s("li",[t._v("取反，强制返回布尔类型。")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("惰性判断法则")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("已经能得出结果（或里遇到真，与里遇到假），绝不会编译执行后面的代码。\n")])])])]),t._v(" "),s("h2",{attrs:{id:"判断运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断运算符"}},[t._v("#")]),t._v(" 判断运算符")]),t._v(" "),s("p",[t._v("标准的大于、小于、等于、大于等于、小于等于（>、<、==/===、>=、<=）。返回布尔类型值，优先转为数值进行比较。\n字符串进行比较时通过 "),s("code",[t._v("ASCLL")]),t._v(" 码进行比较。")]),t._v(" "),s("p",[t._v("数字 < 大写字母 < 小写字母")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("等于（==）和全等于（===）的区别")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("==")]),t._v(" 会进行类型转换，"),s("code",[t._v("===")]),t._v(" 不会进行类型转换。")]),t._v(" "),s("li",[s("code",[t._v("==")]),t._v(" 先进行类型转换再进行比较。")]),t._v(" "),s("li",[s("code",[t._v("===")]),t._v(" 会先判断数据类型是否相等，再判断两边的值是否相等（对象数据类型判断时判断是内存地址，是否指向同一个内存区域）。")])])]),t._v(" "),s("h2",{attrs:{id:"运算符优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[t._v("#")]),t._v(" 运算符优先级")]),t._v(" "),s("p",[t._v("运算符的优先级，用于确定一个表达式的计算顺序。在你不能确定优先级时，可以通过使用 "),s("code",[t._v("()")]),t._v(" 增加优先级。")]),t._v(" "),s("p",[t._v("与或非 < 判断 < 加减 < 乘除、% < ++...")])])}),[],!1,null,null,null);s.default=e.exports}}]);