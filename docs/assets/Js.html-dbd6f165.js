import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{a,c as s,f as e}from"./app-997de2df.js";const t={},p=e(`<h2 id="js数据类型" tabindex="-1"><a class="header-anchor" href="#js数据类型" aria-hidden="true">#</a> JS数据类型</h2><p>基本数据类型：<code>Number、String、Null、Undefined、Boolean</code><br> 引用类型：<code>Object</code></p><h2 id="null和undefined的区别" tabindex="-1"><a class="header-anchor" href="#null和undefined的区别" aria-hidden="true">#</a> null和undefined的区别</h2><p><code>undefined</code>表示变量声明后未进行初始化，是变量声明的默认值。</p><p><code>null</code>表示一个不存在的值或空对象，可用于主动释放引用。</p><h2 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h2><p>浅拷贝：直接将变量的值进行赋值操作(assign、concat、slice、解构)。</p><p>深拷贝：改变引用内存地址。</p><ol><li>通过<code>JSON.stringify</code>转换成JSON字符串，然后使用<code>JSON.parse</code>转换成对象。</li></ol><p>⚠️注意：在转换字符串时会过滤掉值为<code>undefined</code>的属性。</p><ol start="2"><li>递归遍历对象。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">checkType</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;array&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> data
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;array&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        cloneObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cloneObj
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是闭包-闭包的作用及注意点" tabindex="-1"><a class="header-anchor" href="#什么是闭包-闭包的作用及注意点" aria-hidden="true">#</a> 什么是闭包，闭包的作用及注意点</h2><p>闭包就是一个高阶函数，执行后返回一个新的函数，这个函数可以访问其内部的变量。</p><p>形成了一个独立的作用域，保证了变量的私有性。</p><p>闭包会把函数中变量保存到内存中，使用过多内存消耗就会过大容易导致内存泄露。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      a<span class="token operator">--</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> changeA <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call和apply的区别" tabindex="-1"><a class="header-anchor" href="#call和apply的区别" aria-hidden="true">#</a> call和apply的区别</h2><p>两者都能改变<code>this</code>的指向，区别在于<code>call</code>传递的实参可以是多个，而<code>apply</code>传递的实参是一个数组，每一项对应一个参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;w&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>

  <span class="token function">getFullName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token function">getFullName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a> 箭头函数和普通函数的区别</h2><p>箭头函数的<code>this</code>是绑定到上下文中的且没有<code>prototype</code>原型。而普通函数的<code>this</code>是指向被调用的主体，默认情况下指向<code>window</code>。</p><h2 id="三元表达式和if-else的区别" tabindex="-1"><a class="header-anchor" href="#三元表达式和if-else的区别" aria-hidden="true">#</a> 三元表达式和if…else的区别</h2><p>三元表达式有返回值，后者没有返回值。两者是可以相互转换的。</p><h2 id="面向对象的理解" tabindex="-1"><a class="header-anchor" href="#面向对象的理解" aria-hidden="true">#</a> 面向对象的理解</h2><p>面向对象是一种编程思想，将复杂的问题转化为对象的问题。</p><p>ES5使用构造函数进行定义，ES6中使用关键字class进行定义</p><p>面向对象的三大特点：</p><ol><li>封装：将属性、方法封装到类内部</li><li>继承：子类可继承父类的属性和方法</li><li>多态：子类可重写父类中的方法，实现不同的行为</li></ol><h2 id="构造函数和实例对象的区别" tabindex="-1"><a class="header-anchor" href="#构造函数和实例对象的区别" aria-hidden="true">#</a> 构造函数和实例对象的区别</h2><p>实例对象是通过new关键字执行构造函数创建出来的，是一个实例化的过程。</p><p>在 new 的过程中会将 this 指向这个实例对象，将构造函数的原型 prototype 传递给实例对象的隐式原型 <strong>proto</strong>。</p><p><code>instanceof</code> 判断数据类型，<code>a instaceof A</code>。</p><p>原理：用while去遍历实例对象，判断对象上的__proto__是否等于prototype。</p><h2 id="作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#作用域和作用域链" aria-hidden="true">#</a> 作用域和作用域链</h2><ul><li>作用域：描述一个变量的可访问性。分为全局、块级、函数作用域。</li></ul><blockquote><p>在预编译阶段会把变量提升到当前作用域的最前面（函数会将整体提升到最前面）</p></blockquote><ul><li>作用域链：作用域是可以发生嵌套和向外延伸的，当发生多个作用域嵌套形成的一个链表。</li></ul><blockquote><p>当访问一个变量时，首先会在当前作用域中查找，然后依次向外层作用域中查找直到全局作用域。这样由多个作用域构成的链表叫作用域链。</p></blockquote><h2 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h2><p>执行事件的顺序。</p><p>冒泡流：从目标元素向顶层元素传递</p><p>捕获流：从顶层元素向目标元素传递</p><h2 id="get和post的区别" tabindex="-1"><a class="header-anchor" href="#get和post的区别" aria-hidden="true">#</a> get和post的区别</h2><ul><li><p>post 请求相对于 get 请求是比较安全的，get 参数是可见的， post 是不可见。</p></li><li><p>请求参数传递的方式不同，get 请求的参数是拼接在 url 地址后面的，psot 请求的参数是存放在请求体中的</p></li><li><p>get 传递的数据比 post 的小，因为 url 是有长度限制的。</p></li></ul><h2 id="http和https的区别" tabindex="-1"><a class="header-anchor" href="#http和https的区别" aria-hidden="true">#</a> http和https的区别</h2><p>http 是以明文的方式传输的，https是http协议更加安全的版本，通过SSL进行加密传输。</p><p>http默认端口是80，​https默认端口是443。</p><h2 id="取消ajax请求" tabindex="-1"><a class="header-anchor" href="#取消ajax请求" aria-hidden="true">#</a> 取消ajax请求</h2><p>原生请求XHR使用对象的<code>abort</code>方法。</p><p><code>axios</code>通过实例下的<code>CancelToken.source</code>方法创建一个取消请求的实例，<br> 然后通过实例的<code>cancel</code>方法取消请求。</p><p>通过定时器<code>setTimeout</code>和<code>clearTimeout</code>取消ajax请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> timer <span class="token operator">=</span> nll
  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发送请求</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是跨域-什么情况会导致跨域-怎么解决" tabindex="-1"><a class="header-anchor" href="#什么是跨域-什么情况会导致跨域-怎么解决" aria-hidden="true">#</a> 什么是跨域，什么情况会导致跨域，怎么解决</h2><p>出于浏览器同源策略限制和安全性考虑，当请求的地址与当前地址的协议、域名、端口号不一致时会出现跨域的行为。</p><ol><li>JSONP</li></ol><p>前端事先定义好一个用于获取响应数据的回调函数，通过 <code>script</code> 标签（没有同源策略的限制）发起一个请求并将回调函数作为查询参数传递过去，<br> 然后服务端返回这个回调函数的执行将响应数据作为参数传递给回调。</p><ol start="2"><li>CORS（跨域资款共享）</li></ol><p>需要浏览器和服务器同时支持。服务器端需要设置响应头信息来允许跨域请求。<br><code>Access-Control-Allow-Origin</code> 是必须的，要么是请求头的 <code>Origin</code> 字段的值，要么是一个 <code>*</code>（表示接受任意域名的请求）。</p><ol start="3"><li>配置反向代理</li></ol><p>通过打包工具进行反向代理服务器的配置。</p><h2 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露" aria-hidden="true">#</a> 内存泄露</h2><p>当一块内存地址使用完成未被释放，随着程序执行，内存不断堆积。</p><ol><li>错误的调用递归方法</li><li>闭包</li></ol><h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p>js在执行时分为预编译阶段和执行阶段。</p><p>变量提升发生在预编译阶段，在各自作用域最前面声明所有变量，var会忽略块级作用域提升到上一层作用域。此时只提升了变量并没有初始化。</p><p>let、const变量也进行了提升，但只能在初始化时才能访问，在这之前是暂时性死区。</p><p>函数声明会将整个函数提升到最前面，函数在声明的时候就已经赋值了。函数提升会跳出块级作用域，但内容还保留在里面。函数表达式提升时不会将整体提升。</p><h2 id="原型、原型链" tabindex="-1"><a class="header-anchor" href="#原型、原型链" aria-hidden="true">#</a> 原型、原型链</h2><ul><li><p>原型：原型是一种实现面向对象编程的的技术，实现对象之间的继承关系。每个函数上都存在一个原型对象 <code>prototype</code>，实例化时，会将 <code>prototype</code> 传递给实例原型(隐士原型) <code>__proto__</code>。</p></li><li><p>原型链：原型链是对象继承特性的实现方式。当试图访问一个对象属性时，如果对象自身没有这个属性，就会去原型中寻找这个属性，如果原型中也不存在，就会继续在原型的原型中寻找，直到找到该属性或到达原型链的尽头。这样由多个原型对象构成的链表叫原型链。</p></li></ul><h2 id="引用类型和值类型的区别" tabindex="-1"><a class="header-anchor" href="#引用类型和值类型的区别" aria-hidden="true">#</a> 引用类型和值类型的区别</h2><p>值类型存储在栈中，是一个简单的赋值过程。</p><p>引用类型存储在堆中，保存的是内存地址。当一个属性值被修改后，其他被引用的地方也会改变。</p><h2 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h2><ol><li>使用ES6的<code>Set</code>构造函数，然后使用<code>Array.from</code>或结构可以得到一个去重的数组。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义一个空的新数组，然后通过遍历原数组，用<code>indexOf/includes</code>判断新数组中是否存在，不存在就push进去。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token comment">// if(!newArr.includes(item)) newArr.push(item)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用<code>filter</code>过滤。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
  arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-in和for-of的区别" tabindex="-1"><a class="header-anchor" href="#for-in和for-of的区别" aria-hidden="true">#</a> for...in和for...of的区别</h2><p><code>for...in</code>用于可枚举(<code>enumerable</code>)类型的数据(对象，数组，字符串)，遍历的是key，遍历类数组(dom节点列表...)时会遍历到原型中去。</p><p><code>for...of</code>用于可迭代(<code>iterator</code>)类型的数据(数组，字符串)，遍历的是value。</p><h2 id="typeof-和-instanceof-的区别" tabindex="-1"><a class="header-anchor" href="#typeof-和-instanceof-的区别" aria-hidden="true">#</a> typeof 和 instanceof 的区别</h2><p>两者都是判断数据类型的方法。</p><p><code>typeof</code>返回的是变量的数据类型，不能准确的判断引用类型的数据(除function)。</p><p><code>instanceof</code>返回的是布尔值，可以准确的判断引用类型数据。</p><h2 id="判断两个对象是否相等" tabindex="-1"><a class="header-anchor" href="#判断两个对象是否相等" aria-hidden="true">#</a> 判断两个对象是否相等</h2><ol><li>使用<code>JSON.stringify</code>转换成JSON字符串再进行比较(注意值为undefined的属性)。</li><li>递归。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">checkObj</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span>obj2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj1 <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj2 <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token comment">// 内存地址相同直接返回true</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token comment">// 获取对象的所有属性</span>
    <span class="token keyword">const</span> obj1Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> obj2Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1Keys<span class="token punctuation">.</span>length <span class="token operator">!==</span> obj2Keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj1Keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj2Keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj1<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">checkObj</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> obj2<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> == 和 === 的区别</h2><ul><li><code>==</code>会进行类型转换，<code>===</code>不会进行类型转换。</li><li><code>==</code>先进行类型转换再进行值的比较。</li><li><code>===</code>会先判断数据类型是否相等，再判断两边的值是否相等。</li></ul><h2 id="强制、隐式转换" tabindex="-1"><a class="header-anchor" href="#强制、隐式转换" aria-hidden="true">#</a> 强制、隐式转换</h2><p>强制：<code>Number、String、toString、parseInt…</code><br> 隐式：<code>+、-、*、/、==…</code></p><h2 id="判断一个变量准确的数据类型" tabindex="-1"><a class="header-anchor" href="#判断一个变量准确的数据类型" aria-hidden="true">#</a> 判断一个变量准确的数据类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 2</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cookies、sessionstorage、localstorage的区别" tabindex="-1"><a class="header-anchor" href="#cookies、sessionstorage、localstorage的区别" aria-hidden="true">#</a> cookies、sessionStorage、localStorage的区别</h2><p><code>cookies</code>是网站标记用户身份的一段加密的数据，最大4k，最多20个。</p><p><code>sessionStorage</code>浏览器本地存储的一种方式，以键值对的形式进行存储，在浏览器关闭时会自动删除</p><p><code>localStorage</code>~存储的是持久化的数据，不主动删除，数据会一直保留</p><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><p>js是单线程任务，异步和多线程是通过<code>Event Loop</code>机制实现的。<br> 由调用栈、消息队列(宏任务)、微任务队列组成。执行时会从全局栈中一行一行的执行，<br> 遇到函数执行会压入调用栈中，函数执行返回后从栈中弹出。遇到fatch、事件回调、setTimeOut、setInterval<br> 会加入到消息队列中，在调用栈清空的时候执行。遇到promise、async、await会加入到微任务队列中，在调用栈清空的时候立即执行，<br> 处理期间加入的微任务会一同执行。</p><p>微任务的优先级高于宏任务。</p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> promise</h2><p>三种状态：<code>pending</code>(进行中)、<code>resolved</code>(成功)、<code>rejected</code>(失败)。</p><p>当promse调用后，会以进行中的状态开始，最终会以成功或失败的状态结束，并在完成时调用相应的回调函数(then/catch)。<br> 接收<code>resolve、reject</code>两个回调，前者触发成功，后者触发失败并改变promise转态，且以第一次触发的为准。<code>throw</code>会触发<code>reject</code>回调。</p><h2 id="set、map、weakset-和-weakmap-的区别" tabindex="-1"><a class="header-anchor" href="#set、map、weakset-和-weakmap-的区别" aria-hidden="true">#</a> Set、Map、WeakSet 和 WeakMap 的区别？</h2><p>ES6 新增数据结构，都可以存储不重复的值。</p><blockquote><p>Set/WeakSet 是一种集合类型的数据结构，类似数组，成员是唯一且无序的，key 和 value 是相同的。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">Set 和 WeakSet 的区别</p><blockquote><p>WeakSet 只能储存对象引用，不能存放值，而 Set 可以存放任何值。</p></blockquote><blockquote><p>WeakSet 存储的对象是弱引用，会被垃圾回收机制回收。</p></blockquote><blockquote><p>WeakSet 不能被遍历。</p></blockquote></div><blockquote><p>Map/WeakMap 是一种字典类型的数据结构，任何值都可以作为 key，且是有序的。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">Map 与 WeakMap、Set、Object 的区别</p><blockquote><p>WeakMap 只接受对象类型作为键名(弱引用，可被垃圾回收机制回收)，Map 可以是任何值。</p></blockquote><blockquote><p>WeakMap 不能被遍历。</p></blockquote><blockquote><p>Set 以健值对 <code>[value, value]</code> 的形式存储元素，Map 则是以健值对 <code>[key, value]</code> 的形式进行存储。</p></blockquote><blockquote><p>Map/WeakMap 是有序的，Object 是无序的。</p></blockquote></div><h2 id="es5-es6-的继承除了写法以外还有什么区别" tabindex="-1"><a class="header-anchor" href="#es5-es6-的继承除了写法以外还有什么区别" aria-hidden="true">#</a> ES5/ES6 的继承除了写法以外还有什么区别？</h2><blockquote><p>class 声明会进行变量提升，在声明之前访问会出现暂时性死区。</p></blockquote><blockquote><p>class 内部默认开启严格模式。</p></blockquote><blockquote><p>class 所有的方法都不可枚举。</p></blockquote><blockquote><p>必须使用 new 关键字调用。</p></blockquote><blockquote><p>class 内部不能重写类名。</p></blockquote><h2 id="settimeout、promise、async-await-的区别" tabindex="-1"><a class="header-anchor" href="#settimeout、promise、async-await-的区别" aria-hidden="true">#</a> setTimeout、Promise、Async/Await 的区别？</h2><blockquote><p>setTimeout 是一个异步代码，Promise 和 Async/Await 是将异步代码改写为同步代码的解决方式。</p></blockquote><blockquote><p>Promise 本身是同步代码的立即执行函数，在处理成功/错误回调时才是异步操作。</p></blockquote><blockquote><p>Async 只是将函数的返回值设置为一个 Promise 函数，不会将函数变为异步函数。<br> Await 等待一个 Promise 函数执行结果，等待完成后才执行后面的代码。</p></blockquote><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在 Await 语句后所有代码都将变为异步代码。</p></div><h2 id="js-异步解决方案的发展历程以及优缺点" tabindex="-1"><a class="header-anchor" href="#js-异步解决方案的发展历程以及优缺点" aria-hidden="true">#</a> JS 异步解决方案的发展历程以及优缺点</h2><blockquote><ol><li>回调函数。最大问题是<strong>回调地狱</strong>，不能捕获错误和 return。</li><li>Promise。解决了回调地狱，数据依赖过多会导致链式调用冗长。</li><li>Async/await。代码清晰，没有数据依赖时使用 await 会导致性能降低。</li></ol></blockquote>`,126),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","Js.html.vue"]]);export{d as default};
