import{_ as a,V as n,W as s,Z as e}from"./framework.e1ccd5b8.js";const t={},c=e(`<h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><p>js是单线程任务，异步和多线程是通过<code>Event Loop</code>机制实现的。 由调用栈、消息队列(宏任务)、微任务队列组成。执行时会从全局栈中一行一行的执行， 遇到函数执行会压入调用栈中，函数执行返回后从栈中弹出。遇到fatch、事件回调、setTimeOut、setInterval 会加入到消息队列中，在调用栈清空的时候执行。遇到promise、async、await会加入到微任务队列中，在调用栈清空的时候立即执行， 处理期间加入的微任务会一同执行。</p><p>微任务的优先级高于宏任务。</p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> promise</h2><p>三种状态：<code>pending</code>(进行中)、<code>resolved</code>(成功)、<code>rejected</code>(失败)。</p><p>当promse调用后，会以进行中的状态开始，最终会以成功或失败的状态结束，并在完成时调用相应的回调函数(then/catch)。 接收<code>resolve、reject</code>两个回调，前者触发成功，后者触发失败并改变promise转态，且以第一次触发的为准。<code>throw</code>会触发<code>reject</code>回调。</p><h2 id="map-set" tabindex="-1"><a class="header-anchor" href="#map-set" aria-hidden="true">#</a> Map&amp;Set</h2><p>都是ES6新增的一种的数据结构。</p><p>Map类似于对象，是一个键值对的集合，任何类型都可以作为key，且是有序的。</p><p>Set类型于数组，键和值相同，且元素是唯一的。接收一个数组返回一个去重的数组。</p><h2 id="缩小最小字体的方法" tabindex="-1"><a class="header-anchor" href="#缩小最小字体的方法" aria-hidden="true">#</a> 缩小最小字体的方法</h2><p>浏览器可渲染的最小字号为 12px。</p><ol><li><code>transform: scale(0.5)</code></li></ol><ul><li>单独用标签包裹文字进行缩放。</li><li>将整个父元素尺寸放大2倍再进行缩放。</li></ul><ol start="2"><li>SVG矢量图设置<code>text</code></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token comment">&lt;!-- 
    可以设置1-12px任意字号
    y：字号大小
    不支持多行文本
  --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取消ajax请求" tabindex="-1"><a class="header-anchor" href="#取消ajax请求" aria-hidden="true">#</a> 取消ajax请求</h2><p>原生请求XHR使用对象的<code>abort</code>方法。</p><p><code>axios</code>通过实例下的<code>CancelToken.source</code>方法创建一个取消请求的实例， 然后通过实例的<code>cancel</code>方法取消请求。</p><p>通过定时器<code>setTimeout</code>和<code>clearTimeout</code>取消ajax请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> timer <span class="token operator">=</span> nll
  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发送请求</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[c];function p(l,i){return n(),s("div",null,o)}const r=a(t,[["render",p],["__file","js_02.html.vue"]]);export{r as default};
