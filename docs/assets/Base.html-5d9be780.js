import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{a as s,c as a,f as e}from"./app-997de2df.js";const p={},t=e(`<p>javaScript 是基于原型的动态类型的弱类型脚本解释性语言。是一个单线程的运行环境，从上往下依次执行的，且前面的没有执行完后面的就不能执行。</p><p>弱类型：声明变量的时候不需要给定类型，代码执行的时候灵活的改变他的类型。</p><p>动态类型：类型之间没有严格的隔离，使用不同类型进行运算-最终结果一定是6大类型之一。</p><h2 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h2><p>变量必须先声明再使用。声明关键字 <code>var</code>(ES5)、<code>let</code>(ES6)、<code>const</code>(ES6)。</p><p>var、let用于变量的声明，后面可重新赋值。<br> const用于常量的声明，必须初始化，声明后不可修改(只读)，使用大写字母进行命名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span>
  <span class="token keyword">const</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则" aria-hidden="true">#</a> 命名规则</h4><ul><li><p>变量必须以字母开头</p></li><li><p>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</p></li><li><p>变量名称对大小写敏感</p></li><li><p>驼峰命名：<code>MyCoupon</code></p></li><li><p>小驼峰命名：<code>myCoupon</code></p></li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><ul><li><p>字符串（String）</p><ul><li><p>语法形式</p><ul><li>双引号：<code>&quot;&quot;</code></li><li>单引号：<code>&#39;&#39;</code></li><li>反引号：<code>\`\`</code>。 ES6模板字符串。可以使用 <code>\${}</code> 更友好的拼接变量。</li></ul></li><li><p>转义字符</p><p>将 <code>\\</code> 后面的特殊字符转为普通字符</p><ul><li><code>\\n</code>：换行</li><li><code>\\&quot;</code>：双引号</li></ul></li></ul></li><li><p>数字（Number）</p><p>js 中数值并不是一个准确的值，而是一个近似值，存在一定的误差。<code>Number.MAX_VALUE</code> js最大能表示的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">=</span> <span class="token number">0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">解决误差</p><p>在整数上进行处理 - 倍数的乘积使其变成整数再进行操作。</p><p>科学计数法：133e+33 表示 133 * 10^33次方</p></div><ul><li><p>特殊数值</p><ul><li><code>NaN</code>：不是一个数字或算不出的一个值（Not a Number）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span>
<span class="token number">Infinity</span> <span class="token operator">/</span> <span class="token number">Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Infinity/-Infinity</code>：正负无穷大，不能进行表示的非常大/小的值。</li></ul></li><li><p>常用进制</p><ul><li>十进制</li><li>二进制 <code>0b</code></li><li>八进制 <code>0</code></li><li>十六进制 <code>0x</code>：满16进1。0-f。</li></ul><p><code>toSring</code> 方法能将十进制转成任意进制。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转十进制</span>
<span class="token number">100</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">0</span> <span class="token comment">// 十进制转十进制</span>

<span class="token number">1010</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token comment">// 二进制转十进制</span>

<span class="token number">41</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token operator">^</span><span class="token number">0</span> <span class="token comment">// 八进制转十进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">由上得出转十进制通用公式</p><p>n：当前进制，abc：当前进制数。</p><p>得出 <strong>a * n^2 + b * n^1 + c * n^0</strong></p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 十进制转其他进制（连续取余）</span>
<span class="token number">48</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">110000</span> <span class="token comment">// 转二进制</span>

  <span class="token number">48</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">(</span>商 <span class="token number">24</span> 余 <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">24</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">(</span>商 <span class="token number">12</span> 余<span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">12</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">(</span>商 <span class="token number">6</span> 余 <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">(</span>商 <span class="token number">3</span> 余 <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">(</span>商 <span class="token number">1</span> 余 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">(</span>商 <span class="token number">0</span> 余 <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token number">48</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token comment">// 转八进制</span>

  <span class="token number">48</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">(</span>商 <span class="token number">6</span> 余 <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">(</span>商 <span class="token number">0</span> 余 <span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>进制转换是个入栈的过程，所以取值应遵循出栈规则</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二、八、十六进制相互转换</span>
<span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment">// 二进制转八进制</span>

  <span class="token number">10111001</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">001</span> <span class="token number">111</span> <span class="token number">10</span><span class="token punctuation">(</span><span class="token number">271</span><span class="token punctuation">)</span>
  <span class="token number">001</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token number">111</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
  <span class="token number">10</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token number">2</span><span class="token operator">^</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token number">16</span> <span class="token comment">// 二进制转十六进制</span>

  <span class="token number">10111001</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1001</span> <span class="token number">1011</span><span class="token punctuation">(</span><span class="token constant">B9</span><span class="token punctuation">)</span>
  <span class="token number">1001</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
  <span class="token number">1011</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">-</span> <span class="token constant">B</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>二进制转八、十六进制时，2的幂数等于转其他进制需要的位数进行分离，<br> 然后通过转十进制的方法进行计算最后拼接。</p></div></li><li><p>布尔（Boolean）</p><p>只有两个值：<code>ture/false</code>, 常用于状态设置和条件判断。</p><p>条件判断的两种形式：</p><ul><li><code>==</code>：等于。不会对类型进行比较。</li><li><code>===</code>：恒/全等于。会进行类型比较。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>所有表达式都有返回值，浏览器判断代码是否执行完的唯一标准是是否有返回值。</p></div></li><li><p>Undefined</p><p>未定义，表示不存在或未被初始化（赋值）的一个内容。返回当前类型的值。</p></li><li><p>Null</p><p>指向一个不存在的空间或空的对象。返回当前类型的值。</p></li></ul><h3 id="复杂数据类型" tabindex="-1"><a class="header-anchor" href="#复杂数据类型" aria-hidden="true">#</a> 复杂数据类型</h3><ul><li><p>对象（Object）</p><p>除简单类型外，其余都是 <code>Object</code> 类型。</p></li></ul><p>判断数据类型：</p><ol><li><p>typeof 变量 / typeof(变量)。</p></li><li><p>利用对象的 <code>toSring</code> 方法改变 <code>this</code> 指向，可以判断出具体的数据类型。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="日志打印与错误抛出" tabindex="-1"><a class="header-anchor" href="#日志打印与错误抛出" aria-hidden="true">#</a> 日志打印与错误抛出</h2><ul><li><p><code>alert</code>：弹窗。</p></li><li><p><code>console.log</code>：日志输出。</p></li><li><p><code>console.dir</code>：以目录（对象）的形式进行输出。</p></li><li><p><code>console.error</code>：打印错误。</p></li><li><p><code>console.warn</code>：打印警告。</p></li><li><p><code>throw new Error</code>：抛出一个错误。与上两个的区别是该语句会终止代码执行。</p></li></ul><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><h4 id="语句块" tabindex="-1"><a class="header-anchor" href="#语句块" aria-hidden="true">#</a> 语句块</h4><p>又称代码块。由最基本的语句组成，用一对大括号定界。一般情况下有和没有无本质区别，通常用于流程控制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  statement_1
  <span class="token operator">...</span>
  statement_n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件判断语句" tabindex="-1"><a class="header-anchor" href="#条件判断语句" aria-hidden="true">#</a> 条件判断语句</h4><ul><li><code>if...else</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  statement_1
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  statement_2
<span class="token punctuation">}</span> <span class="token comment">// 语句 else 可选</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当条件表达式 <code>condition</code> 为 ture 执行 if 语句，否则（false）执行else语句。条件表达式最终返回一个 <code>Boolean</code> 类型的值。</p><p>也可以进行组合使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition_1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  statement_1
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition_2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  statement_2
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
  statement_last
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a> switch 语句</h4><p>对表达式（expression）进行求值，并进行 <code>case</code> 语句匹配，匹配成功执行对应语句。未匹配到执行 <code>default</code> 语句。</p><p><code>default break</code> 是可选的。<code>break</code> 是用于语句执行完成后跳出 swicth 语句。否则会继续执行后面的语句。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token literal-property property">label_1</span><span class="token operator">:</span>
    statements_1
    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
  <span class="token operator">...</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    statements_def
    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h4><p>用于次数确定的循环。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>initialExpression<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>incrementExpression<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  statement
<span class="token punctuation">}</span>

<span class="token comment">// eg</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>initialExpression 初始化表达式的值，可以声明变量。必须的。</p></li><li><p>condition 计算表达式的值（true/false）。如果 condition 表达式整个都被省略掉了，condition 的值会被认为是 true。</p></li><li><p>incrementExpression 更新表达式。可选。</p></li><li><p>continue 可结束<strong>本次</strong>循环。</p></li></ol><div class="hint-container warning"><p class="hint-container-title">continue 和 break 的区别</p><ol><li>continue：for 循环内部关键字。跳过本次循环，继续执行后面的循环。</li><li>break：结束循环，后面的循环不再执行。只会跳出最近的这层循环，也可跳出指定循环。</li></ol></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 跳出指定循环</span>
<span class="token literal-property property">loop1</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>
  <span class="token literal-property property">loop2</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span> loop1
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token string">&#39;j&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while-do-while" tabindex="-1"><a class="header-anchor" href="#while-do-while" aria-hidden="true">#</a> while &amp; do...while</h4><p>适用于次数未知的循环。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  statement
<span class="token punctuation">}</span>

<span class="token keyword">do</span> <span class="token punctuation">{</span>
  statement
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">两者区别</p><p><code>do...while</code> 至少循环一次，<code>while</code> 一次都不执行。</p></div><h4 id="for-in-for-of" tabindex="-1"><a class="header-anchor" href="#for-in-for-of" aria-hidden="true">#</a> for...in &amp; for...of</h4><p>遍历对象。</p><ul><li><code>for...in</code>用于可枚举(<code>enumerable</code>)类型的数据(对象，数组，字符串)，遍历的是key，遍历类数组(dom节点列表...)时会遍历到原型中去。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// eg</span>
<span class="token keyword">const</span> domarr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> domarr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// length、entries、values...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>for...of</code>用于可迭代(<code>iterator</code>)类型的数据(数组，字符串)，遍历的是value。</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>将一系列代码（逻辑）打包成一个整体，实现分步解决问题，将复杂的问题简单化。</p><h4 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h4><ul><li><p>函数声明</p><p>开头以关键字 <code>function</code> 声明。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>函数表达式</p><p>与运算符一起使用的函数为函数表达式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>函数执行</p><p>又称函数调用 <code>fun()</code></p></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在进行一些函数赋值的时候注意区分函数执行 <code>name()</code> 和函数 <code>name</code></p></div><h4 id="函数的输入与输出" tabindex="-1"><a class="header-anchor" href="#函数的输入与输出" aria-hidden="true">#</a> 函数的输入与输出</h4><ul><li><p>输入：函数调用时向函数内部传递数据（实参），在函数声明或表达式中通过变量进行接收（形参）。<br> 此处的变量不需要声明，会自动在函数内部声明。</p><ul><li><p>形参和实参一一对应，实参比形参多，多余的部分会被舍去。形参比实参多，会在函数中定义但不会接收参数。</p></li><li><p>剩余参数：在形参最后面，通过 <code>...声明</code> 的形式对未被形参接收的实参进行打包。</p></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// typeof params  Array </span>
<span class="token punctuation">}</span>
<span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&#39;dw&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;shanghai&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出：函数的返回值。使用 <code>return</code> 进行返回，默认返回 <code>undefined</code>。函数一旦返回内容表示函数执行完成，后面的代码将不再执行。</li></ul><h4 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h4><p>简化了函数，降低了书写成本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 普通函数</span>
<span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 箭头函数</span>
<span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 <code>return</code> 只有一条语句时可以省略 return。可删除 <code>{}</code> 或改为 <code>()</code>。</li><li>参数只有一个时可省略参数的 <code>()</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;dw&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;dw&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="形参默认值" tabindex="-1"><a class="header-anchor" href="#形参默认值" aria-hidden="true">#</a> 形参默认值</h4><p>调用函数时，未对其传参会使用参数的默认值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>函数在执行时才会去访问变量。</p></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h4 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h4><p>算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。标准的算术运算符就是加减乘除 (+ - * /)。</p><table><thead><tr><th style="text-align:left;">Operator</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">求余 (%)</td><td style="text-align:left;">二元运算符。返回相除之后的余数。</td></tr><tr><td style="text-align:left;">自增 (++)</td><td style="text-align:left;">一元运算符。操作数加一。</td></tr><tr><td style="text-align:left;">自减 (--)</td><td style="text-align:left;">一元运算符。操作数减一。</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">++i 和 i++ 的区别</p><p><code>++i</code> 是先自加再使用，<code>i++</code> 先使用再自加。</p></div><h4 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符" aria-hidden="true">#</a> 三目运算符</h4><p>又称条件运算符，是 JavaScript 中唯一需要三个操作数（三元）的运算符。运算的结果根据给定条件在两个值中取其一。<br> 表达式为 <code>true</code> 返回值1，否则返回值2。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 条件 ? 值 1 : 值 2</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">?</span> <span class="token number">23</span> <span class="token operator">:</span> age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符" aria-hidden="true">#</a> 逗号运算符</h4><p>对两个操作数或表达式进行求值并返回最终操作数或表达式的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span> <span class="token comment">// 33</span>
<span class="token number">3</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">33</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h4><ul><li><p>&amp;&amp;（与）</p><ul><li>得出一个布尔值，两个条件同时满足才为 <code>true</code>。</li><li>底层运算：（A&amp;&amp;B）A 为真返回 B，A 为假返回 A。</li></ul></li><li><p>||（或）</p><ul><li>只要一个表达式为真则为真，两个表达式同时为假则为假。</li><li>底层运算：（A||B）A 为真返回 A，A 为假返回 B。</li></ul></li><li><p>!（非）</p><ul><li>取反，强制返回布尔类型。</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">惰性判断法则</p><p>已经能得出结果（或里遇到真，与里遇到假），绝不会编译执行后面的代码。</p></div><h4 id="判断运算符" tabindex="-1"><a class="header-anchor" href="#判断运算符" aria-hidden="true">#</a> 判断运算符</h4><p>标准的大于、小于、等于、大于等于、小于等于（<code>&gt;、&lt;、==/===、&gt;=、&lt;=</code>）。返回布尔类型值，优先转为数值进行比较。<br> 字符串进行比较时通过 <code>ASCLL</code> 码进行比较。</p><p>数字 &lt; 大写字母 &lt; 小写字母</p><div class="hint-container warning"><p class="hint-container-title">等于（==）和全等于（===）的区别</p><ul><li><code>==</code> 会进行类型转换，<code>===</code> 不会进行类型转换。</li><li><code>==</code> 先进行类型转换再进行比较。</li><li><code>===</code> 会先判断数据类型是否相等，再判断两边的值是否相等（对象数据类型判断时判断是内存地址，是否指向同一个内存区域）。</li></ul></div><h4 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级" aria-hidden="true">#</a> 运算符优先级</h4><p>运算符的优先级，用于确定一个表达式的计算顺序。在你不能确定优先级时，可以通过使用 <code>()</code> 增加优先级。</p><p>与或非 &lt; 判断 &lt; 加减 &lt; 乘除、% &lt; ++...</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><p>类型转换分为隐式转换（自动转换）和显示转换（强制转换）。隐式转换通常发生在算术表达式中，<br> 操作数类型不一样自动转换成能够计算的类型，本质不会改变变量原来的值。而显示转换需要手动调用一些方法进行转换。<br> 例如 <code>Number、Boolean、parseInt、parseFloat</code> 等。</p><h4 id="转字符串" tabindex="-1"><a class="header-anchor" href="#转字符串" aria-hidden="true">#</a> 转字符串</h4><p>可通过 <code>String</code> 方法进行强制转换。</p><p>除复杂类型外其他类型转字符串都是直接加上引号。</p><div class="hint-container warning"><p class="hint-container-title">原理(复杂类型转字符串)</p><p>任何对象身上都有一个 <code>toString</code> 方法，对象转字符串的本质是调用 <code>toString</code>（可重写toString方法），<br> 对象和数组 <code>toString</code> 返回的内容不一样。</p></div><ul><li><p>普通对象</p><p>大多数情况下对象转字符串的值为 <code>&quot;[object Object]&quot;</code>。DOM 结构转字符串会得到 <code>&quot;[object HTMLHeadElement]&quot;</code>。</p><p>对象调用方法首先会调用自身的，自身没有其次再是原型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数组：直接返回数组中的内容。</p></li><li><p>函数：直接返回函数整体，底层还是调用 <code>toString</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myToString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 重写函数中的toString</span>
myToString<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="转数值" tabindex="-1"><a class="header-anchor" href="#转数值" aria-hidden="true">#</a> 转数值</h4><p>可通过 <code>Number、parseInt、parseFloat</code> 方法进行强制转换。</p><ul><li>字符串转数值</li></ul><p>使用运算符（<code>+、-、*、/</code>）进行转换，如果操作数不是个数字返回 <code>NaN</code>。<br> 对空字符串或 <code>null</code> 操作时返回 0。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span> <span class="token string">&#39;3&#39;</span> <span class="token comment">// 3</span>
<span class="token operator">-</span> <span class="token string">&#39;3&#39;</span> <span class="token comment">// -3</span>
<span class="token string">&#39;6&#39;</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token comment">// 6</span>
<span class="token string">&#39;9&#39;</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token comment">// 9</span>
<span class="token operator">+</span> <span class="token string">&#39;jbk&#39;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>布尔转数值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// true 为 1，false 为 0。</span>
<span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment">// 1</span>
<span class="token operator">+</span> <span class="token boolean">false</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象转数值</li></ul><p>对象一般是不能转数值的。在进行转数值时首先会尝试调用 <code>valueOf</code> 的方法，然后再去调用 <code>toString</code>。valueOf 优先级高于 toString。<br> 代码底层还是调用的 <code>toString</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// [object Object]1</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">valueOf</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">33</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组在进行转数值时，先执行 <code>toString</code> 方法（在这之前也会先调用 <code>valueOf</code>），然后尝试字符串转数值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// &#39;1&#39;</span>

arr<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">33</span>
arr <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数转不了数值。</p><h4 id="转布尔" tabindex="-1"><a class="header-anchor" href="#转布尔" aria-hidden="true">#</a> 转布尔</h4><p>可通过 <code>Boolean、!(取反)</code> 方法进行强制转换。</p><p>转布尔类型的六大假值：<code>&#39;&#39;、0、null、undefined、false、 NaN</code></p><h4 id="js全局方法" tabindex="-1"><a class="header-anchor" href="#js全局方法" aria-hidden="true">#</a> js全局方法</h4><p><code>Number、Boolean、String、parseInt、parseFloat...</code></p><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>变量生效的范围，不能对外延生。只要作用域还能被访问，那么这个作用域就不会消失。</p><p>作用域在变量声明阶段就已经确定了。</p><p>分为：</p><ul><li>全局作用域：当前文件都能访问。</li><li>块级作用域：只能在当前代码块中访问。</li><li>函数作用域：只能在当前函数中访问。</li></ul><div class="hint-container warning"><p class="hint-container-title">层级关系</p><p>全局 &gt; (块级、函数)</p></div><h4 id="声明周期" tabindex="-1"><a class="header-anchor" href="#声明周期" aria-hidden="true">#</a> 声明周期</h4><p>当进入作用域时作用域瞬间出现，程序执行完离开作用域消失（所有内容都会消失，保证了内存空间的充足）。作用域不会立即消失，js 的垃圾回收机制会判断作用域里的变量是否被引用，没有则回收该作用域。</p><h4 id="变量在作用域中的特点" tabindex="-1"><a class="header-anchor" href="#变量在作用域中的特点" aria-hidden="true">#</a> 变量在作用域中的特点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span> <span class="token comment">// 提升到全局作用域</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span> <span class="token comment">// 受限于函数作用域，外部不能进行访问</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">var、let、const的区别</p><ul><li><code>var</code> 是ES5的内容。会忽略块级作用域，自动提升到上一层作用域；受限于函数作用域。</li><li><code>let、const</code> 是ES6的内容，会识别块级和函数作用域。</li></ul></div><ul><li>变量的访问</li></ul><p>首先会在当前作用域进行查找 true 返回，false 继续向上层作用域查找，直至顶层作用域，最终 false 抛出一个错误。</p><p>作用域链：访问一个变量时，首先会在当前作用域中查找，然后依次向上层作用域中查找直到顶层作用域。这样由多个作用域构成的链表叫作用域链。</p><h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p>javascript 代码执行是从上往下依次执行的。本质上的执行是分为两个阶段的。</p><h4 id="预编译阶段" tabindex="-1"><a class="header-anchor" href="#预编译阶段" aria-hidden="true">#</a> 预编译阶段</h4><p>此阶段会进行内存空间的开辟、变量存储位置的分配、校验语法错误、确定作用域之间的关系...，<br> 读取变量声明，对变量进行提升（在当前作用域最前面声明所有变量，var 会忽略块级作用域，提升到上一层作用域）。<br> 只是对变量进行提升了并没有赋值，赋值在执行阶段。</p><p><code>let、const</code> 也会进行变量提升，只是在初始化（执行阶段）时才能访问，在这之前是锁死的状态（暂时性死区）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span>

  <span class="token comment">// 等价于</span>
  <span class="token keyword">var</span> name
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span>

  <span class="token comment">//console.log(name, name2) //报错，暂时性死区</span>
  	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;dw&#39;</span>
  	<span class="token keyword">const</span> name2 <span class="token operator">=</span> <span class="token string">&#39;dgg&#39;</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数声明提升时会将函数整体提升到最前面(函数一等公民，在声明的时候就已经赋值)。<br> 函数在变量提升时会跳出块级作用域，但函数内容还保留在块级作用域中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// dw</span>
<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;dw&#39;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getName<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dw&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// dw</span>

<span class="token comment">// 特殊列子</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getName<span class="token punctuation">)</span> <span class="token comment">//报错，function dw10(){console.log(666)} 是表达式,不会变量提升</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">函数表达式和函数提升的区别</p><p>函数表达式不会进行变量提升（不会将函数体提升），而函数会（整体提升）。</p></div><p><strong>总结</strong></p><ol><li>变量提升的位置：作用域最前面。</li><li>var在提升时会跳出块级作用域，不会跳出函数作用域。</li><li>let、const提升时不会跳出块级作用域，更不会跳出函数作用域。</li><li>函数提升时会跳出块级作用域，函数变量进行了提升，函数体仍保留在块级作用域中。</li></ol><h4 id="执行阶段" tabindex="-1"><a class="header-anchor" href="#执行阶段" aria-hidden="true">#</a> 执行阶段</h4><p>读取一行解释一行，严格遵循执行循序。</p><h2 id="立执行函数" tabindex="-1"><a class="header-anchor" href="#立执行函数" aria-hidden="true">#</a> 立执行函数</h2><p>将匿名函数或函数声明转化成函数表达式，再在函数后加()让其立即执行。执行完立即销毁。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 建议在前面加上分号，防止表达式拼接报错</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匿名函数</span>
  <span class="token keyword">return</span> <span class="token string">&#39;dw&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 接收参数</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> name
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;dw&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点</strong>：创建了一个私有作用域，不会造成变量污染。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>一个函数 A 保留另一个函数 B 的作用域，且 A 还能被访问，则 B 的作用域就被保留了。次数 A 称为闭包函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPassword</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> pwd <span class="token operator">=</span> <span class="token string">&#39;0418&#39;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> pwd
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点</strong></p><ol><li>函数在执行后作用域被保留了，保留了某些特定的状态。</li><li>不会形成变量污染，拥有独立作用域，保证了变量的私有性。</li></ol><p><strong>缺点</strong></p><ol><li>作用域没有消失，内存被占用了。闭包使用过多会导致内存不足造成内存泄露（递归）。</li><li>解决方案： <ul><li>主动刷新 <code>window.onload()</code></li><li>移除引用 <code>= null</code></li></ul></li></ol><h2 id="深入函数" tabindex="-1"><a class="header-anchor" href="#深入函数" aria-hidden="true">#</a> 深入函数</h2><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><ul><li><p>length：函数形参的个数。</p></li><li><p>arguments：以数组的形式存储函数的实参，只能在函数中访问 <code>arguments</code>，且访问是当前函数的 <code>arguments</code>。<br><code>arguments.callee</code> 指代的是参数所属的函数（本体）。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>箭头函数是没有 <code>arguments</code> 属性的，会去外层寻找。<br> [[Scopes]] 函数的作用域</p></div></li><li><p>name：函数名称，不能修改。匿名函数的名称是空字符串，可通过<code>arguments.callee.name</code>获取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="this-对象" tabindex="-1"><a class="header-anchor" href="#this-对象" aria-hidden="true">#</a> this 对象</h4><p>存在于函数中，指向调用函数的主体对象（谁调用 <code>this</code> 指向谁）。全局中 <code>this</code> 默认指向 window 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token punctuation">}</span>
<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>箭头函数的 <code>this</code> 绑定在上下文中（即上层函数或window），且不能改。</p></div><p>回调函数的 this 默认指向 window。可使用箭头函数、<code>bind</code>(返回一个函数)改变this指向。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;this.name&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fun</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// this.name</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// bind 返回一个函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="改变-this-指向" tabindex="-1"><a class="header-anchor" href="#改变-this-指向" aria-hidden="true">#</a> 改变 this 指向</h5><ol><li><strong>call</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * call 的参数
 * 1. 需要绑定的this的主体对象，主动传入会指向传入的那个对象
 *    不传入或写null会指向window。
 * 2. 传递的参数，可以是多个
 */</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;dw&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token parameter">work</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// dw</span>
<span class="token punctuation">}</span>
<span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;it&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>apply</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数：
 * 1. 需要绑定的this的主体对象，主动传入会指向传入的那个对象，
 *    不传入或写null会指向window。
 * 2. 函数的参数，数组形式
 */</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;dgg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// dgg 1, 2, 3</span>
<span class="token punctuation">}</span>
<span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">call 和 apply 的区别</p><p>函数参数接收不同，apply 以数组的形式进行参数接收，call 则除了第一个参数外其余全是函数的参数（单个参数形式进行接收）。</p></div><ol start="3"><li><strong>bind</strong></li></ol><p>返回一个待执行的函数，该函数执行完 <code>this</code> 才算改变完成。</p><p>特点：</p><ol><li>会强行改变this，改变之后无法修改回来。</li><li>调用 <code>bind</code> 时可传入部分参数 A，执行返回函数是可传入部分参数 B，最终执行结果会将A，B合并到一起整体执行。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数：
 * 1. 需要绑定的this的主体对象，主动传入会指向传入的那个对象，
 *    不传入或写null会指向window。let 和 const 定义的变量不属于顶层对象 window。
 * 2. 函数的参数，同call
 */</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xww&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> date<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&#39;2022-8-29&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>字符串声明见数据类型。本质是通过 <code>new String</code> 方法创建一个对象（包装对象），对这个对象进行求值（valueOf）。<br> 操作的是该包装对象下的方法，操作完自动消失，再次操作时从新创建一个新的包装对象。</p><p>字符串的访问是从下标0开始的。<code>length</code> 属性可获取字符串的长度（只读不可修改），转义字符 <code>\\</code> 是不会统计到长度中的。</p><h4 id="charat" tabindex="-1"><a class="header-anchor" href="#charat" aria-hidden="true">#</a> charAt</h4><p>获取下标对应的字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;dw&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// w</span>

<span class="token comment">// 会自动转为数值类型</span>
<span class="token string">&#39;dw&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// w</span>

<span class="token comment">// 不传&amp;空字符串&amp;非数值字符串返回一个字符</span>
<span class="token string">&#39;dw&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chatcodeat" tabindex="-1"><a class="header-anchor" href="#chatcodeat" aria-hidden="true">#</a> chatCodeAt</h4><p>获取下标对应字符的 ASCII 码，参数同 <code>charAt</code>。</p><h4 id="string-fromcharcode" tabindex="-1"><a class="header-anchor" href="#string-fromcharcode" aria-hidden="true">#</a> String.fromCharCode</h4><p>获取 ASCII 码对应的字符。</p><h4 id="concat" tabindex="-1"><a class="header-anchor" href="#concat" aria-hidden="true">#</a> concat</h4><p>拼接字符串。与 + 拼接同效。</p><h4 id="includes" tabindex="-1"><a class="header-anchor" href="#includes" aria-hidden="true">#</a> includes</h4><p>判断字符串是否包含该字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="indexof-lastindexof" tabindex="-1"><a class="header-anchor" href="#indexof-lastindexof" aria-hidden="true">#</a> indexOf / lastIndexOf</h4><p>获取字符对应的下标，未查询到返回 -1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * lastIndexOf 同 indexOf
 * 区别：lastIndexOf 从后往前查询
 */</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>

<span class="token comment">// 指定位置查询</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h4><p>替换满足条件的第一个元素，返回修改后的字符串。可使用正则匹配。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数：
 * 1. 要替换的字符串
 * 2. 替换的目标字符串
 */</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token comment">// this.name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice</h4><p>截取字符串，返回截取的内容。推荐使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数：
 *  1. 截取开始下标
 *  2. 截取结束下标，不包含当前下标位置的字符
 */</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">// name</span>

<span class="token comment">// 未传入参数截取全部字符</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this name</span>

<span class="token comment">// 传入一个非负数的值，从当前位置截取到最后</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// name</span>

<span class="token comment">// 传入一个负数的值，截取字符串后面整数位的字符</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// name</span>

<span class="token comment">// 特殊：参数一为整数/0，参数二为负数。意为排除前面几位并且排除后面几位。</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// his nam</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="substr-substring" tabindex="-1"><a class="header-anchor" href="#substr-substring" aria-hidden="true">#</a> substr / substring</h4><p>截取字符串，返回截取的内容。不传参返回全部内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * substr 参数：
 *  1. 截取的开始位置，可正可负。负数返回字符串后面的内容。
 *  2. 截取的长度
 */</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// name</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// name</span>

<span class="token doc-comment comment">/**
 * substring 参数：
 *  1. 截取的开始位置，可正可负。负数从0开始截取
 *  2. 截取的结束位置，不包含当前下标位置的字符
 */</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">// name</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// this</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split</h4><p>以指定字符切割字符串，返回一个数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;t&quot;, &quot;h&quot;, &quot;i&quot;, &quot;s&quot;, &quot; &quot;, &quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;e&quot;]</span>
<span class="token string">&#39;this name&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;this&#39;, &#39;name&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="touppercase-tolowercase" tabindex="-1"><a class="header-anchor" href="#touppercase-tolowercase" aria-hidden="true">#</a> toUpperCase / toLowerCase</h4><p>大小写转换。</p><h4 id="trim" tabindex="-1"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> trim</h4><p>去除字符串首位空格。</p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>包含了多个值的一个集合或列表。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 语法糖形式</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token doc-comment comment">/**
 * 2. new 的方式创建
 * 参数：如果是数值类型且个数为1会创建一个该参数长度的数组，其他形式会以参数作为值创建数组
 */</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [empty × 3]</span>

<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;this&#39;, &#39;name&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fill" tabindex="-1"><a class="header-anchor" href="#fill" aria-hidden="true">#</a> fill</h4><p>填充数组每一项，返回原数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span> <span class="token comment">// [33, 33, ...33]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> length</h4><p>获取数组的长度。可以修改，大于原有长度会创建 n 个 empty 元素；小于原有长度会移除多出的元素，<br> 修改回来无法再访问之前的元素。</p><h4 id="concat-1" tabindex="-1"><a class="header-anchor" href="#concat-1" aria-hidden="true">#</a> concat</h4><p>拼接数组。返回一个新数组，原数组不变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;this&#39;, &#39;name&#39;]</span>
<span class="token comment">// 数组会拆分再进行拼接</span>
<span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;this&#39;, &#39;name&#39;, &#39;hello world&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="flat" tabindex="-1"><a class="header-anchor" href="#flat" aria-hidden="true">#</a> flat</h4><p>对数组进行扁平化。只会处理一层，不会深层处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;this&quot;, &quot;name&quot;, [&#39;d&#39;, &#39;w&#39;]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse</h4><p>反转数组。对原数组进行操作，返回数组反转后的结果。</p><h4 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> join</h4><p>将数组以某种字符进行拼接，默认逗号，返回拼接后的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token comment">// this.name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="push-unshift" tabindex="-1"><a class="header-anchor" href="#push-unshift" aria-hidden="true">#</a> push / unshift</h4><p>向数组添加元素。操作原数组，返回数组改变后的长度。支持多个参数。</p><p><code>push</code> 向末尾添加，<code>unshift</code> 向数组开头添加</p><h4 id="pop-shift" tabindex="-1"><a class="header-anchor" href="#pop-shift" aria-hidden="true">#</a> pop / shift</h4><p>删除数组元素。操作原数组，返回被删除的那一项。</p><p><code>pop</code> 删除数组最后一项，<code>shift</code> 删除数组第一项</p><h4 id="splice" tabindex="-1"><a class="header-anchor" href="#splice" aria-hidden="true">#</a> splice</h4><p>对数组进行增、删、改（先删除后添加），原数组上操作。返回删除的内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数说明：
 *  1. 操作开始的位置（下标），包含下标的元素。
 *  2. 删除的个数（0不删除）
 *  3. 新元素，可多个
 */</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 1, 2, 3]</span>

<span class="token comment">// 负数表示从后面开始</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token comment">// 从下标（包含）开始删除后面全部元素</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h4><p>遍历数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数说明：
 *  1. 回调函数（函数以参数的形式传给函数。保证代码的执行顺序）
 *    item：数组每一项
 *    index：当前项在数组中的下标
 *    array：当前循环的数组
 *  2. 回调函数的this指向，默认window。当回调是箭头函数时遵循箭头函数的绑定法则。
 */</span>
<span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>类数组不能使用数组的方法。可通过改变 <code>this</code> 指向的方法进行访问。</p></div><h4 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h4><p>查找满足条件的第一项并返回，遇到 true 直接结束该函数不会继续判断。参数同 <code>forEach</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;dw&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;dw&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// { name: &#39;dw&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="every-some" tabindex="-1"><a class="header-anchor" href="#every-some" aria-hidden="true">#</a> every / some</h4><p><code>every</code> 判断数组中的每一项是否满足条件，返回一个布尔值。<br> 在执行过程中遇到 false 直接结束该函数（整体为 true 才返回 true）。参数同 <code>forEach</code>。</p><p><code>some</code> 则与 <code>every</code> 相反。判断数组中是否至少有一项满足条件。遇到 true 直接结束该函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> typeOf item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> typeOf item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h4><p>筛选满足条件的所有元素，返回一个新数组。参数同 <code>forEach</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [3, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h4><p>对数组每一项进行操作（修改），返回修改过后的新数组。<code>return</code> 出去的元素就是新数组的元素。<br> 注意：操作对象（属于引用类型，对应的是内存中的地址）时，原数组也会改变</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [3, 6, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> reduce</h4><p>对数值进行累加，返回最终累加的值。<br> 迭代时以初始值作为起点，每次迭代值依次与初始值进行计算，并将结果作为新的初始值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数说明：
 *  1. 回调函数
 *    迭代体。每次计算的结果
 *    item：数组每一项
 *    index：当前项在数组中的下标
 *    array：当前循环的数组
 *  2. 迭代初始值
 *    未传初始值默认数组的第一项（第一次迭代会从第二项开始）
 */</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h4><p>对数组进行排序，对原数组进行操作，返回排序后的数组。<br><code>a - b</code> 升序；<code>b - a</code> 降序。</p><p>根据回调函数返回值进行排序：</p><ol><li><code>&gt;= 0</code> a b 两项不交换位置</li><li><code>&lt; 0</code> a b两项交换位置</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数说明：
 *  1. 回调函数
 *    a：数组当前项
 *    b：数组下一项
 */</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment">// [1, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [3, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">打乱一个数组</p><p><code>[...].sort(() =&gt; Math.random() - 0.5)</code></p></div><h2 id="解构" tabindex="-1"><a class="header-anchor" href="#解构" aria-hidden="true">#</a> 解构</h2><p>以 <code>...</code> 的形式进行解构。写入时进行打包（剩余参数），读取时进行分解展开。解构的元素不能单独存在，必须由对象或数组包裹。<br> 对实际数组或对象使用时，拆分数组（按下标解构）或对象中的每一个元素，字符串也可以解构。</p><h4 id="对象的解构" tabindex="-1"><a class="header-anchor" href="#对象的解构" aria-hidden="true">#</a> 对象的解构</h4><ul><li>在读取时结构。</li><li>核心：左右结构一样，如果属性名匹配上，那么属性值完成匹配。</li><li>语法糖：如果声明的变量与属性名同名 <code>name:name</code> 可简写为 name。</li></ul><p><strong>例子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 是一条赋值语句。如果传入的是变量，会根据下标匹配值</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// [1,2,3]。类似剩余参数</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 1</span>

<span class="token comment">// 对象解构</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span> <span class="token comment">// name, 23</span>

<span class="token comment">// 会解构成以下标为属性，1,2，3为值的对象</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token operator">...</span>arr<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// {0: 1, 1: 2, 2: 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用解构进行变量交换" tabindex="-1"><a class="header-anchor" href="#使用解构进行变量交换" aria-hidden="true">#</a> 使用解构进行变量交换</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组解构是按位置传的（效率比较低）</span>
<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span>

<span class="token comment">// 借助第三个变量</span>
<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数学对象-math" tabindex="-1"><a class="header-anchor" href="#数学对象-math" aria-hidden="true">#</a> 数学对象(Math)</h2><ul><li><p>PI：圆周率。</p></li><li><p>E：自然常数。</p></li><li><p>abs：绝对值。整数的绝对值是本身，负数的绝对值是相反数。常用做求距离。</p></li><li><p>floor：向下取整，返回一个不大于它的最大整数。</p></li><li><p>ceil：向上取整，返回一个比他大的最小整数。</p></li><li><p>round：四舍五入。</p></li><li><p>trunc：去除小数，返回一个整数。</p></li><li><p>random：随机数，返回一个0-1之间的16位数（包括0不包括1）<code>[0,1)</code>。</p></li><li><p>min/max：求最小/大值，返回最小/大的那一个数。至少两个参数。</p></li><li><p>pow(a, b)：求次方数。a 是底数， b 是指数。<code>Math.pow(3, 2) -&gt; 9</code></p></li></ul><h4 id="三角函数-角度和边的比值关系" tabindex="-1"><a class="header-anchor" href="#三角函数-角度和边的比值关系" aria-hidden="true">#</a> 三角函数(角度和边的比值关系)</h4><p>用弧度值单位表示（360deg = 2Math.PI）。</p><p>勾股定理：<code>a^2 + b^2 = c^2</code></p><ul><li>sin：对边比斜边。</li><li>cos：邻边比斜边。</li><li>tan：对边比邻边。</li></ul><div class="hint-container tip"><p class="hint-container-title">特殊的等腰三角形比值关系</p><p>1:1:Math.pow(2,1/2)</p></div><h2 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h2><p>定时器属于异步代码。同步代码执行完成后异步代码才开始计时执行，异步代码根据时间或触发先后循序执行。</p><h4 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout" aria-hidden="true">#</a> setTimeout</h4><p>延迟执行。本质是去异步队列注册一个任务，并反该唯一任务id，随着注册次数的增加而增加。<br> 可通过 <code>clearTimeout</code> 方法传入任务 id 进行定时器的清除。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数说明：
 *  1：回调函数
 *  2：延迟执行时间，毫秒值。
 */</span>
<span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>

<span class="token comment">// 清除定时器</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setinterval" tabindex="-1"><a class="header-anchor" href="#setinterval" aria-hidden="true">#</a> setInterval</h4><p>每间隔一段时间执行一次。同 <code>setTimeout</code>。间隔时间必须大于等于 1，不能是 0。<br> 可通过 <code>clearInterval</code> 方法传入任务 id 进行定时器的清除。<br> 做动画欠佳，可能会出现卡顿、掉帧、延迟。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 参数说明：
 *  1：回调函数
 *  2：间隔时间，毫秒值。
 */</span>
<span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>

<span class="token comment">// 清除定时器</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求动画帧" tabindex="-1"><a class="header-anchor" href="#请求动画帧" aria-hidden="true">#</a> 请求动画帧</h2><p><code>requestAnimationFrame</code> 等待一次渲染，在下次渲染时继续执行。严格的与页面刷新频率一致。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;半导体明天大涨~&#39;</span><span class="token punctuation">)</span>
  <span class="token function">requestAnimationFrame</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,285),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","Base.html.vue"]]);export{d as default};
