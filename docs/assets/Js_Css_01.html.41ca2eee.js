import{_ as n,V as a,W as s,Z as e}from"./framework.e1ccd5b8.js";const t={},p=e(`<h2 id="css选择器及优先级" tabindex="-1"><a class="header-anchor" href="#css选择器及优先级" aria-hidden="true">#</a> Css选择器及优先级</h2><p>!important &gt; 行内样式 &gt; ID选择器 &gt; 类/伪类/属性选择器 &gt; 标签/伪元素选择器 &gt; 关系选择器</p><h2 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc" aria-hidden="true">#</a> BFC</h2><p>BFC 全称为块级格式化上下文 (Block Formatting Context) ，它决定了元素如何进行定位以及与其他元素的关系和相互作用。BFC 提供了一个环境，HTML元素在这个环境中按照规则进行布局，一个环境中的元素不会影响到其它环境中的布局。可以说BFC就是一个作用范围、独立的容器，并且这个容器的布局与这个容器外的布局互不影响。</p><h3 id="触发bfc的条件" tabindex="-1"><a class="header-anchor" href="#触发bfc的条件" aria-hidden="true">#</a> 触发BFC的条件</h3><ol><li>浮动（float）</li><li>定位（position）</li><li>弹性盒模型（flex）</li><li>行内块元素（inline-block）</li><li>overflow</li></ol><h3 id="bfc可解决的问题" tabindex="-1"><a class="header-anchor" href="#bfc可解决的问题" aria-hidden="true">#</a> BFC可解决的问题</h3><ol><li>解决外边距合并（overflow）</li><li>清除浮动</li></ol><h2 id="盒模型-box-sizing" tabindex="-1"><a class="header-anchor" href="#盒模型-box-sizing" aria-hidden="true">#</a> 盒模型 box-sizing</h2><ol><li>普通盒模型：content-box。内容实际大小，随边距、边框的值增加而增大。</li><li>怪异盒模型：border-box。内容 + padding + border。</li></ol><h2 id="css实现三角形" tabindex="-1"><a class="header-anchor" href="#css实现三角形" aria-hidden="true">#</a> css实现三角形</h2><p>设置<code>width</code>为0，然后添加边框。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 20px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定位-position" tabindex="-1"><a class="header-anchor" href="#定位-position" aria-hidden="true">#</a> 定位(position)</h2><ol><li>static：默认值。</li><li>relative：相对定位。以当前位置为基准进行偏移，任占据原来的空间。</li><li>absolute：绝对定位。相对于最近的父级进行定位(relative)，不存在则相对于html定位。</li><li>fixed：相对于浏览器窗口。</li></ol><h2 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a> 清除浮动</h2><p>浮动会导致高度塌陷。</p><ol><li>给父级元素添加伪类。</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  <span class="token selector">.selector:after</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>父级元素设置<code>overflow: hidden</code>。</li><li>在浮动元素后添加一个块级元素，然后使用<code>clear: both</code>。缺点：出现空白标签。</li><li>设置固定高度。</li></ol><h2 id="实现左侧固宽右侧自适应" tabindex="-1"><a class="header-anchor" href="#实现左侧固宽右侧自适应" aria-hidden="true">#</a> 实现左侧固宽右侧自适应</h2><ol><li>float + margin</li><li>flex</li><li>position</li><li>calc</li></ol><h2 id="水平垂直居中" tabindex="-1"><a class="header-anchor" href="#水平垂直居中" aria-hidden="true">#</a> 水平垂直居中</h2><ol><li>transform</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>position(绝对定位)，需给父元素设置相对定位。</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>flex</li></ol><h2 id="display-none-和-visibility-hidden-的区别" tabindex="-1"><a class="header-anchor" href="#display-none-和-visibility-hidden-的区别" aria-hidden="true">#</a> <code>display: none</code> 和 <code>visibility: hidden</code> 的区别</h2><p>两者都是隐藏元素。</p><p>前者不占据空间，从渲染树中消失，是非继承属性</p><p>后者隐藏后占据原来的空间，保留渲染数，是继承属性。</p><h2 id="flex布局" tabindex="-1"><a class="header-anchor" href="#flex布局" aria-hidden="true">#</a> Flex布局</h2><ol><li>flex-direction：设置主轴排列方向</li><li>flex-warp：空间不够是否换行</li><li>justitfy-content：主轴对齐方式</li><li>align-item：交叉轴对齐方式</li><li>align-self：项目对齐方式</li><li>flex-grow：项目放大比例，默认为0</li><li>flex-shrink：项目缩小比例，默认为1等比缩小</li><li>flex：项目在空间中的占比</li></ol><p>⚠️注意：当项目设置flex为1后，内容超出元素会被拉伸。</p><p><strong>解决方案</strong></p><ol><li>设置<code>width</code>为0</li><li>超出元素进行隐藏<code>overflow: hidden</code></li></ol><h2 id="grid-布局" tabindex="-1"><a class="header-anchor" href="#grid-布局" aria-hidden="true">#</a> Grid 布局</h2><ul><li><p>容器。</p><ul><li><code>grid-template-rows/grid-template-columns</code>：设置行/列数。 <ul><li>repeat(row/columns, height/width) <ul><li>row/columns <ul><li>数字</li><li>auto-fill：根据容器大小自动填充。</li></ul></li><li>height/width <ul><li>像素值</li><li>(n)fr：均等分，可单独设置。n表达占据的比例。</li></ul></li></ul></li><li>minmax(最小值, 占比)</li></ul></li><li><code>row-gap/columns-gap</code>：设置行/列之间的间距，复合属性<code>gap</code>。</li><li><code>grid-template-areas</code>：为每个项目划分区域并对应一个标识符。</li><li><code>grid-auto-flow</code>：排列方向。 <ul><li>row：默认，从左到右。</li><li>row dense：当后面项目在这放不下，会将能放下的项目移动到这。</li><li>cloumns：从上到下。</li></ul></li><li><code>justify-items/align-items</code>：每个项目在网格中(主轴/交叉轴)的对齐方式，复合属性<code>place-items</code>。</li><li><code>justify-content/align-content</code>：控制整个内容区域在容器里的对齐方式。</li></ul></li><li><p>项目。</p><ul><li><code>grid-row-start/grid-row-end</code>：设置跨行开始和结束的网格线，复合属性<code>grid-row</code>。</li><li><code>grid-column-start/grid-column-end</code>：设置跨列开始和结束的网格线，复合属性<code>grid-column</code>。</li><li><code>grid-area</code>：指定项目的区域位置，配合<code>grid-template-areas</code>使用。</li><li><code>justify-self/align-self</code>：单独设置项目在主轴/交叉轴上的对齐方式。</li></ul></li></ul><h2 id="viewport-视口窗口" tabindex="-1"><a class="header-anchor" href="#viewport-视口窗口" aria-hidden="true">#</a> viewport(视口窗口)</h2><p>可视区域，用于移动端适配。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>width：控制viewport的宽度大小(可以是定值)，默认为设备的宽度(<code>device-width</code>)</li><li>initial-scale：页面初始加载时的缩放比例</li><li>maximum-scale：允许用户缩放的最大比例</li><li>minimum-scale：允许用户缩放的最小比例</li><li>user-scalable：是否允许用户缩放</li></ol><h2 id="px、em、rem的区别" tabindex="-1"><a class="header-anchor" href="#px、em、rem的区别" aria-hidden="true">#</a> px、em、rem的区别</h2><p>px是一个绝对单位。</p><p>em、rem是一个相对单位。em相对于当前元素的字体大小，rem相对于根元素(html、body)的字体大小。</p><h2 id="什么是跨域-什么情况会导致跨域-怎么解决" tabindex="-1"><a class="header-anchor" href="#什么是跨域-什么情况会导致跨域-怎么解决" aria-hidden="true">#</a> 什么是跨域，什么情况会导致跨域，怎么解决</h2><p>出于浏览器同源策略限制和安全性考虑，当请求的地址与当前地址的协议、域名、端口号不一致时会出现跨域的行为。</p><ol><li>JSONP</li></ol><p>前端事先定义好一个用于获取响应数据的回调函数，通过 <code>script</code> 标签（没有同源策略的限制）发起一个请求并将回调函数作为查询参数传递过去， 然后服务端返回这个回调函数的执行将响应数据作为参数传递给回调。</p><ol start="2"><li>CORS（跨域资款共享）</li></ol><p>需要浏览器和服务器同时支持。服务器端需要设置响应头信息来允许跨域请求。 <code>Access-Control-Allow-Origin</code> 是必须的，要么是请求头的 <code>Origin</code> 字段的值，要么是一个 <code>*</code>（表示接受任意域名的请求）。</p><ol start="3"><li>配置反向代理</li></ol><p>通过打包工具进行反向代理服务器的配置。</p><h2 id="首屏加载的优化方案" tabindex="-1"><a class="header-anchor" href="#首屏加载的优化方案" aria-hidden="true">#</a> 首屏加载的优化方案</h2><ol><li><p>使用路由懒加载</p></li><li><p>Vue 异步组件</p></li><li><p>Webpack开启gzip压缩</p></li><li><p>使用link标签的rel属性设置 prefetch</p></li></ol><h2 id="js数据类型" tabindex="-1"><a class="header-anchor" href="#js数据类型" aria-hidden="true">#</a> JS数据类型</h2><p>基本数据类型：<code>Number、String、Null、Undefined、Boolean</code> 引用类型：<code>Object</code></p><h2 id="null和undefined的区别" tabindex="-1"><a class="header-anchor" href="#null和undefined的区别" aria-hidden="true">#</a> null和undefined的区别</h2><p><code>undefined</code>表示变量声明后未进行初始化，是变量声明的默认值。</p><p><code>null</code>表示一个不存在的值或空对象，可用于主动释放引用。</p><h2 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h2><p>浅拷贝：直接将变量的值进行赋值操作(assign、concat、slice、解构)。</p><p>深拷贝：改变引用内存地址。</p><ol><li>通过<code>JSON.stringify</code>转换成JSON字符串，然后使用<code>JSON.parse</code>转换成对象。</li></ol><p>⚠️注意：在转换字符串时会过滤掉值为<code>undefined</code>的属性。</p><ol start="2"><li>递归遍历对象。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">checkType</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;array&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> data
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;array&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        cloneObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cloneObj
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是闭包-闭包的作用及注意点" tabindex="-1"><a class="header-anchor" href="#什么是闭包-闭包的作用及注意点" aria-hidden="true">#</a> 什么是闭包，闭包的作用及注意点</h2><p>能够访问其他函数内部变量的一个函数。</p><p>形成了一个独立的作用域，保证了变量的私有性。</p><p>闭包会把函数中变量保存到内存中，使用过多内存消耗就会过大容易导致内存泄露。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      a<span class="token operator">--</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> changeA <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call和apply的区别" tabindex="-1"><a class="header-anchor" href="#call和apply的区别" aria-hidden="true">#</a> call和apply的区别</h2><p>两者都能改变<code>this</code>的指向，区别在于<code>call</code>传递的实参可以是多个，而<code>apply</code>传递的实参是一个数组，每一项对应一个参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;w&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>

  <span class="token function">getFullName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token function">getFullName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a> 箭头函数和普通函数的区别</h2><p>箭头函数的<code>this</code>是绑定到上下文中的且没有<code>prototype</code>原型。而普通函数的<code>this</code>是指向被调用的主体，默认情况下指向<code>window</code>。</p><h2 id="三元表达式和if-else的区别" tabindex="-1"><a class="header-anchor" href="#三元表达式和if-else的区别" aria-hidden="true">#</a> 三元表达式和if…else的区别</h2><p>三元表达式有返回值，后者没有返回值。两者是可以相互转换的。</p><h2 id="面向对象的理解" tabindex="-1"><a class="header-anchor" href="#面向对象的理解" aria-hidden="true">#</a> 面向对象的理解</h2><p>面向对象是一种编程思想，将复杂的问题转化为对象的问题。</p><p>ES5使用构造函数进行定义，ES6中使用关键字class进行定义</p><p>面向对象的三大特点：</p><ol><li>封装：将属性、方法封装到类内部</li><li>继承：子类可继承父类的属性和方法</li><li>多态：子类可重写父类中的方法，实现不同的行为</li></ol><h2 id="构造函数和实例对象的区别" tabindex="-1"><a class="header-anchor" href="#构造函数和实例对象的区别" aria-hidden="true">#</a> 构造函数和实例对象的区别</h2><p>实例对象是通过new关键字执行构造函数创建出来的，这过程叫实例化。</p><p>在new的过程中会将this指向这个实例对象，将构造函数的原型prototype传递给实例对象的原型__proto__。</p><p><code>instanceof</code> 判断数据类型，<code>a instaceof A</code>。</p><p>原理：用while去遍历实例对象，判断对象上的__proto__是否等于prototype。</p><h2 id="作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#作用域和作用域链" aria-hidden="true">#</a> 作用域和作用域链</h2><p>作用域：变量的可访问性。分为全局、块级、函数作用域。在预编译阶段会把变量提升到当前作用域的最前面（函数会将整体提升到最前面）</p><p>作用域链：访问一个变量时，首先会在当前作用域中查找，然后依次向上层作用域中查找直到顶层作用域。这样由多个作用域构成的链表叫作用域链。</p><h2 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h2><p>执行事件的顺序。</p><p>冒泡流：从目标元素向顶层元素传递</p><p>捕获流：从顶层元素向目标元素传递</p><h2 id="get和post的区别" tabindex="-1"><a class="header-anchor" href="#get和post的区别" aria-hidden="true">#</a> get和post的区别</h2><p>get请求是不安全的，请求的参数会拼接在url后面，传输的数据比post小(url有长度限制)。</p><p>post请求相对于get请求比较安全，请求参数在请求体中，用户是看不见的。</p><h2 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露" aria-hidden="true">#</a> 内存泄露</h2><p>程序不再使用一块内存，由于某种原因内存空间没有被释放，导致内存不断占用。</p><ol><li>错误的调用递归方法</li><li>闭包</li></ol><h2 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p>js在执行时分为预编译阶段和执行阶段。</p><p>变量提升发生在预编译阶段，在各自作用域最前面声明所有变量，var会忽略块级作用域提升到上一层作用域。此时只提升了变量并没有赋值。</p><p>let、const变量也进行了提升，但只能在初始化时才能访问，在这之前是暂时性死区。</p><p>函数声明会将整个函数提升到最前面，函数在声明的时候就已经赋值了。函数提升会跳出块级作用域，但内容还保留在里面。函数表达式提升时不会将整体提升。</p><h2 id="原型、原型链" tabindex="-1"><a class="header-anchor" href="#原型、原型链" aria-hidden="true">#</a> 原型、原型链</h2><p>原型：函数的原型是<code>prototype</code>，对象的原型是<code>__proto__</code>。在创建实例对象时函数原型<code>prototype</code>会传递给实例对象的原型<code>__proto__</code>，即实例对象的原型等于构造函数的原型。通过<code>constructor</code>可以访问实例的构造器。</p><p>原型链：在访问对象属性时，首先会在对象内部去查找，如果不存在则去对象的<code>__proto__</code>上查找，<code>__proto__</code>指向构造函数的原型，原型对象又有自己的<code>__proto</code>，直到最顶层。这样由多个原型对象构成的链表叫原型链。</p><h2 id="引用类型和值类型的区别" tabindex="-1"><a class="header-anchor" href="#引用类型和值类型的区别" aria-hidden="true">#</a> 引用类型和值类型的区别</h2><p>值类型就是一个简单的赋值过程。</p><p>引用类型则是保存对象的内存地址，当一个属性值被修改后，其他被引用的地方也会改变。</p><h2 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h2><ol><li>使用ES6的<code>Set</code>构造函数，然后使用<code>Array.from</code>或结构可以得到一个去重的数组。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义一个空的新数组，然后通过遍历原数组，用<code>indexOf/includes</code>判断新数组中是否存在，不存在就push进去。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token comment">// if(!newArr.includes(item)) newArr.push(item)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用<code>filter</code>过滤。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
  arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-in和for-of的区别" tabindex="-1"><a class="header-anchor" href="#for-in和for-of的区别" aria-hidden="true">#</a> for...in和for...of的区别</h2><p><code>for...in</code>用于可枚举(<code>enumerable</code>)类型的数据(对象，数组，字符串)，遍历的是key，遍历类数组(dom节点列表...)时会遍历到原型中去。</p><p><code>for...of</code>用于可迭代(<code>iterator</code>)类型的数据(数组，字符串)，遍历的是value。</p><h2 id="typeof-和-instanceof-的区别" tabindex="-1"><a class="header-anchor" href="#typeof-和-instanceof-的区别" aria-hidden="true">#</a> typeof 和 instanceof 的区别</h2><p>两者都是判断数据类型的方法。</p><p><code>typeof</code>返回的是变量的数据类型，不能准确的判断引用类型的数据(除function)。</p><p><code>instanceof</code>返回的是布尔值，可以准确的判断引用类型数据。</p><h2 id="判断两个对象是否相等" tabindex="-1"><a class="header-anchor" href="#判断两个对象是否相等" aria-hidden="true">#</a> 判断两个对象是否相等</h2><ol><li>使用<code>JSON.stringify</code>转换成JSON字符串再进行比较(注意值为undefined的属性)。</li><li>递归。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">checkObj</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span>obj2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj1 <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj2 <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token comment">// 内存地址相同直接返回true</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token comment">// 获取对象的所有属性</span>
    <span class="token keyword">const</span> obj1Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> obj2Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1Keys<span class="token punctuation">.</span>length <span class="token operator">!==</span> obj2Keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj1Keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj2Keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj1<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">checkObj</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> obj2<span class="token punctuation">[</span>obj1Keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> == 和 === 的区别</h2><ul><li><code>==</code>会进行类型转换，<code>===</code>不会进行类型转换。</li><li><code>==</code>先进行类型转换再进行值的比较。</li><li><code>===</code>会先判断数据类型是否相等，再判断两边的值是否相等。</li></ul><h2 id="强制、隐式转换" tabindex="-1"><a class="header-anchor" href="#强制、隐式转换" aria-hidden="true">#</a> 强制、隐式转换</h2><p>强制：<code>Number、String、toString、parseInt…</code> 隐式：<code>+、-、*、/、==…</code></p><h2 id="判断一个变量准确的数据类型" tabindex="-1"><a class="header-anchor" href="#判断一个变量准确的数据类型" aria-hidden="true">#</a> 判断一个变量准确的数据类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 2</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cookies、sessionstorage、localstorage的区别" tabindex="-1"><a class="header-anchor" href="#cookies、sessionstorage、localstorage的区别" aria-hidden="true">#</a> cookies、sessionStorage、localStorage的区别</h2><p><code>cookies</code>是网站标记用户身份的一段加密的数据，最大4k，最多20个。</p><p><code>sessionStorage</code>浏览器本地存储的一种方式，以键值对的形式进行存储，在浏览器关闭时会自动删除</p><p><code>localStorage</code>~存储的是持久化的数据，不主动删除，数据会一直保留</p>`,141),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","Js+Css_01.html.vue"]]);export{r as default};
