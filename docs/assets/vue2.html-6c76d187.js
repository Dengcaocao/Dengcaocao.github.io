import{_ as n,W as s,X as a,$ as t}from"./framework-a2c3bf79.js";const e={},p=t(`<h2 id="起步" tabindex="-1"><a class="header-anchor" href="#起步" aria-hidden="true">#</a> 起步</h2><ol><li>引入 vue.js。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>实例 vue 对象。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 实例挂载的 DOM 对象（id/class）。或使用 $mount 方法进行挂载。</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 存放数据变量，可直接在模版中使用。实例化时会对 data 中的属性绑定监听器。</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 计算属性，必须 return 一个值。默认只有 getter 方法，使用计算属性时会调用这方法。</span>
    <span class="token comment">// 可定义一个 setter 方法，接收一个 newVal 值。</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 默认</span>
      <span class="token function">getVal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span>val
      <span class="token punctuation">}</span>
      <span class="token comment">// 定义 setter</span>
      <span class="token function">getVal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span>val
        <span class="token punctuation">}</span>
        <span class="token function">set</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 监听器，数据变动时执行回调，接收新值/旧值。</span>
    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">test</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 监听对象下的某个属性</span>
      <span class="token string">&#39;test.val&#39;</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token comment">// 深度监听</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">handler</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 开启深度监听</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 方法</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue 使用插值运算符 <code>{{}}</code> 进行数据插入。可以是变量、表达式、函数执行。</p><p>vue 是单向的，但可以使用 v-model 实现双向绑定。</p><div class="hint-container tip"><p class="hint-container-title">computed watch 和 methods 的区别</p><ul><li><p>computed 和 watch 的区别。</p><ul><li>computed可以监听自己定义(非data中的变量)或动态添加的一些变量。</li><li>watch是监测vue实例对象的变化，监听的变量必须是data中的变量。</li></ul></li><li><p>computed 和 methods 的区别。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> computed 是有缓存的。当数据发生改变时才会重新计算，反之使用缓存中的数据。</label></li><li>methods 是每调用一次就好执行一次。</li></ul></li></ul></div><h2 id="基本指令" tabindex="-1"><a class="header-anchor" href="#基本指令" aria-hidden="true">#</a> 基本指令</h2><ul><li><p><code>v-html</code>：解析 html 标签，以 html 文本格式显示。</p></li><li><p><code>v-model</code>：数据双向绑定。视图发生改变会更新视图模型，视图模型发生改变也会跟新视图。</p><p>修饰符。</p><ul><li><code>.lazy</code>：将数据同步由 input 转为 change 事件。</li><li><code>.number</code>：转位数值类型。</li><li><code>.trim</code>：去除首位空格。</li></ul></li><li><p><code>v-bind</code>：属性绑定。语法糖 <code>:</code>。</p><ul><li>绑定 class。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>  <span class="token comment">&lt;!-- 对象绑定形式 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{container: isAdd, container2: isAdd}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 数组绑定形式。[{对象方式}]或[类名...] --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;container&#39;, &#39;container2&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 三目运算符方式 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isAdd ? &#39;container&#39; : &#39;container2&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">isAdd</span><span class="token operator">:</span> ture
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定 style 样式。</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>  <span class="token comment">&lt;!-- 也可以定义到data或computed中进行绑定。注意使用小驼峰命名 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{backgroundColor: &#39;red&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>v-once</code>：只渲染一次。后续数据改变将不会更新。</p></li><li><p><code>v-if/v-show</code>：控制元素的显示和隐藏。<code>v-if</code> 可配合 <code>v-else-if、v-else</code> 使用。</p></li><li><p><code>v-for</code>：遍历对象(value, key, index)或数组(item, index)，渲染一个列表，必须绑定唯一标识符 <code>key</code> 可提升性能。</p></li><li><p><code>v-on</code>：事件绑定与自定义事件触发。<code>$event</code> 事件对象，绑定函数执行时默认传人此参数。</p><p>常用修饰符</p><ul><li><code>.stop</code>：阻止事件冒泡。</li><li><code>.prevent</code>：阻止默认事件。</li><li><code>.native</code>：将原生事件绑定到组件上。</li><li><code>.once</code>：只触发一次。</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">v-if 与 v-show 的区别</p><ol><li>v-if 是一个重绘重建的过程，根据表达式的值在 DOM 中创建或移除元素。切换消耗相对较高。</li><li>v-show 是使用样式 <code>display: none;</code></li></ol></div>`,11),l=[p];function c(o,i){return s(),a("div",null,l)}const d=n(e,[["render",c],["__file","vue2.html.vue"]]);export{d as default};
