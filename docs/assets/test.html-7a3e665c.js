const n=JSON.parse('{"key":"v-7a92c856","path":"/article/test.html","title":"算法","lang":"zh-CN","frontmatter":{"title":"算法","icon":"code","article":true,"sidebar":false,"description":"介绍下深度优先遍历和广度优先遍历，如何实现？ 深度优先: 首先访问顶点，然后依次从未被访问的邻节点出发进行访问，直到所有与顶点相通的节点被访问到。 const dfs = (node, nodeList = []) =&gt; { if (node === null) return nodeList.push(node) for (let i = 0; i &lt; node.children.length; i++) { dfs(node.children[i], nodeList) } return nodeList }","head":[["meta",{"property":"og:url","content":"https://dengcaocao.github.io/docs/article/test.html"}],["meta",{"property":"og:site_name","content":"Deng·草草"}],["meta",{"property":"og:title","content":"算法"}],["meta",{"property":"og:description","content":"介绍下深度优先遍历和广度优先遍历，如何实现？ 深度优先: 首先访问顶点，然后依次从未被访问的邻节点出发进行访问，直到所有与顶点相通的节点被访问到。 const dfs = (node, nodeList = []) =&gt; { if (node === null) return nodeList.push(node) for (let i = 0; i &lt; node.children.length; i++) { dfs(node.children[i], nodeList) } return nodeList }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-09T07:31:40.000Z"}],["meta",{"property":"article:author","content":"Deng·草草"}],["meta",{"property":"article:modified_time","content":"2023-11-09T07:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-09T07:31:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Deng·草草\\",\\"url\\":\\"dengcaocao.github.io\\"}]}"]]},"headers":[{"level":2,"title":"介绍下深度优先遍历和广度优先遍历，如何实现？","slug":"介绍下深度优先遍历和广度优先遍历-如何实现","link":"#介绍下深度优先遍历和广度优先遍历-如何实现","children":[]}],"git":{"createdTime":1699515100000,"updatedTime":1699515100000,"contributors":[{"name":"DW","email":"dengcaocao.dcc@gamil.com","commits":1}]},"readingTime":{"minutes":0.33,"words":98},"filePathRelative":"article/test.md","localizedDate":"2023年11月9日","excerpt":"<h2> 介绍下深度优先遍历和广度优先遍历，如何实现？</h2>\\n<blockquote>\\n<p>深度优先: 首先访问顶点，然后依次从未被访问的邻节点出发进行访问，直到所有与顶点相通的节点被访问到。</p>\\n</blockquote>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">dfs</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">node<span class=\\"token punctuation\\">,</span> nodeList <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span>\\n  nodeList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> node<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> nodeList<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> nodeList\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
