import{_ as n,V as s,W as a,Z as e}from"./framework.d907b2a0.js";const p={},t=e(`<div class="custom-container tip"><p class="custom-container-title">Tips</p><p>使用脚手架创建项目<code>vue-cli</code>必须在4.5.0以上</p></div><h2 id="vue2和vue3的区别" tabindex="-1"><a class="header-anchor" href="#vue2和vue3的区别" aria-hidden="true">#</a> vue2和vue3的区别</h2><ul><li><p>使用<code>proxy</code>实现响应式，支持 TypeScript语法。</p></li><li><p>使用 Composition 组合 API。</p></li><li><p>打包体积减少，渲染更快。</p></li><li><p>使用<code>createApp</code>工厂函数创建实例。</p></li><li><p>vue2 模板中必须有一个根节点，vue3中可以没有。</p></li><li><p>通过<code>defineComponent</code>函数定义组件。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineCompoent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api" aria-hidden="true">#</a> Composition API</h2><h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> setup</h3><ul><li><p>所有的组合式 API 函数都必须在 setup 中使用并且只在初始化时执行一次。</p></li><li><p>setup 先于 beforeCreate 执行，此时实例未创建完成，所有 setup 中不能访问this。</p></li><li><p>能与 vue2 形式定义的 data、methods... 进行合并。 vue2 能访问 setup 中属性和方法，但 setup 中不能访问 vue2 里面的。 重名 setup 优先，不建议混合使用。</p></li><li><p>setup的参数：</p><ul><li>props：父组件向子组件传递的数据，并且是在props中接收的所有数据。</li><li>context <ul><li>attrs：当前标签上的所有属性对象，未在props中定义的数据。</li><li>emit：分发事件。</li><li>slots：插槽。</li></ul></li></ul></li><li><p>返回值可以是一个对象或渲染函数，但不能是一个 async 函数。</p><ul><li>对象：对象中的属性和方法可以直接在模板中使用。</li><li>渲染函数： 自定义渲染内容。了解即可。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h3><p>用于基本数据类型的响应式定义，创建一个 RefImpl 引用对象。依然使用<code>defineProperty</code>实现响应式。</p><p>view 中可直接使用，但在 model 中需要通过<code>.value</code>的形式进行获取。</p><p>如果 ref 定义的是一个引用类型的数据，内部会同过 reactive 转为 proxy 代理对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// ref 获取dom</span>
<span class="token comment">// &lt;div ref=&quot;divDom&quot;&gt;&lt;/div&gt;</span>
<span class="token keyword">const</span> divDom <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive" aria-hidden="true">#</a> reactive</h3><p>用于引用类型数据的响应式定义，只能用于引用类型。传入源对象返回一个 proxy 代理对象。</p><p>操作源对象时不会触发视图的更新，对代理对象操作是才会触发视图的更新，并且源对象中的数据也会改变。</p><p>reactive 定义的响应式是深层次的，内部基于 ES6 proxy 实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue2-vue3-响应式的比较" tabindex="-1"><a class="header-anchor" href="#vue2-vue3-响应式的比较" aria-hidden="true">#</a> Vue2 &amp; Vue3 响应式的比较</h3><h4 id="vue2" tabindex="-1"><a class="header-anchor" href="#vue2" aria-hidden="true">#</a> Vue2</h4><ul><li><p>实现原理</p><ul><li>对象：通过<code>Object.defineProperty</code>对已有的属性读取和修改进行数据劫持。</li><li>数组：通过重写数组（改变引用地址）和更新数组一系列的方法实现元素修改的劫持。</li></ul></li><li><p>存在的问题</p><ul><li>动态的添加和删除属性不会触发视图的更新。</li><li>直接通过下标修改数组元素不会触发视图更新。</li></ul></li><li><p>解决方法：vue提供<code>$set</code>的方法。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h4><ul><li>实现原理 <ul><li>通过 Proxy 代理拦截对象中任意属性的变化（读写、添加、删除）。</li><li>通过 Reflect 反射对代理对象进行操作。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">info</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;鱿鱼&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 添加、修改</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),o=[t];function i(c,l){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","vue3.html.vue"]]);export{r as default};
